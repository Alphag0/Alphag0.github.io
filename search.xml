<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker从入门到实践</title>
      <link href="/2020/06/01/docker/"/>
      <url>/2020/06/01/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-shell"><code class="language-shell">docker version        # 显示docker版本信息docker info           # 显示docker的系统信息docker 命令 --help         # 帮助命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><pre class="line-numbers language-shell"><code class="language-shell">docker pulldocker rm -f # 强制删除docker rmi -fdocker images -aq # 全部 id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><pre class="line-numbers language-shell"><code class="language-shell">docker run [可选参数] image# 参数说明--name="Name" # 容器名字-d            # 后台方式运行-it           # 交互方式运行，进入容器查看-p 8080:8080  # 指定容器的端口 -p 主机端口:容器端口-P            # 随机指定端口-v 主机目录:容器内目录 #使用数据卷-e            # 环境docker run -it centos /bin/bash# 显示日志docker logs-tf--tail # 要显示的日志条数# 运行的容器进程信息docker top# 查看容器元数据docker inspect# 进入当前正在运行的容器docker exec -it b36969b8061f # 打开一个新的终端，可以在里面操作docker attach  # 进入正在执行的终端，不会启动新的进程#拷贝docker cp id:容器路径 主机路径# 启动和停止docker startdocker stopdocker restartdocker kill    # 强制停止容器# 安装nginxdocker run -d --name nginx01 -p 3344:80 nginx# 安装tomcatdocker run -d --name tomcat01 -p 9000:8080 tomcat# 安装esdocker run -d --name elasticsearch --net esnet -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.7.0# 安装kibana --linkdocker run -it -d -e ELASTICSEARCH_URL=http://127.0.0.1:9200 --name kibana -p 5601:5601 --net esnet kibana:7.7.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令小结"><a href="#命令小结" class="headerlink" title="命令小结"></a>命令小结</h3><p><img src="https://cdn.jsdelivr.net/gh/Alphag0/pic@master/docker/1589890154075.png" alt=""></p><pre class="line-numbers language-shell"><code class="language-shell">attach       # 当前 shell 下 attach 连接指定运行镜像build        # 通过Dockerfile定制镜像commit       # 提交当前容器为新的镜像cp           # 从容器中拷贝指定文件或者目录到宿主机中create       # 创建一个新的容器,同run,但不启动容器diff         # 查看docker容器变化events       # 从docker服务获取容器实时事件exec         # 在已存在的容器上运行命令export       # 导出容器的内容流作为一个tar归档文件[对应 import ]history      # 展示一个镜像形成历史images       # 列出系统当前镜像import       # 从tar包中的内容创建一个新的文件系统映像[对应export]info         # 显示系统相关信息inspect      # 查看容器详细信息kill         # kill 指定 docker 容器load         # 从一个tar包中加载一个镜像[对应save]login        # 注册或者登陆一个docker源服务器logout       # 从当前Docker registry 退出logs         # 输出当前容器日志信息port         # 查看映射端口对应的容器内部源端pause        # 暂停容器ps           # 列出容器列表pull         # 从docker镜像源服务器拉取指定镜像或者库镜像push         # 推送指定镜像或者库镜像至docker源restart      # 重启运行的容器rm           # 移除一个或者多个容器rmi          # 移除一个或多个镜像[无容器使用该镜像才可删除,否则需删除相关容器才可继续或-f强制删除]run          # 创建一个新的容器并运行一个命令save         # 保存一个镜像为一个tar包[对应1oad]search       # 在docker hub 中搜索镜像start        # 启动容器stop         # 停止容器tag          # 给源中镜像打标签top          # 查看容器中运行的进程信息unpause      # 取消暂停容器version      # 查看docker版本号wait         # 截取容器停止时的退出状态值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><pre class="line-numbers language-shell"><code class="language-shell"># -v 挂载docker run -it -v 主机目录:容器内目录# 安装mysqldocker run -d -p 33333:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7# 查看docker元数据docker inspeect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><pre class="line-numbers language-shell"><code class="language-shell"># --volumes-fromdocker run -it --name docker02 --volumes-from docker01 my-centos:1.0# 多个mysql同步数据docker run -d -p 33333:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7docker run -d -p 33334:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-form mysql01 mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><blockquote><p>构建步骤：</p><ol><li>编写一个 dockerfile 文件</li><li>docker build 构建为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像（DockerHub、阿里云镜像仓库）</li></ol></blockquote><h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><pre class="line-numbers language-shell"><code class="language-shell">FROM          # 基础镜镜像，一切从这里开始构建MAINTAINER    # 镜像是谁写的,姓名+邮箱RUN           # 镜像构建的时候需要运行的命令ADD           # 步骤: tomcat镜像,这个tomcat压缩包!添加内容WORKDIR       # 镜像的工作目录VOLUME        # 挂载的目录EXPOSE        # 暴露端口配置CMD           # 指定这个容器启动的时候要运行的命令,只有最后一个会生效，可被替代ENTRYPOINT    # 指定这个容器启动的时候要运行的命令,可以追加命令ONBUILD       # 当构建一个被继承DockerFile这个时候就会运行ONBUILD 的指令。触发指令。COPY          # 类似ADD ,将我们文件拷见到镜像ENV           # 构建的时候设置环境变量!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dockerfile示例一（通过VOLUME添加卷挂载）"><a href="#Dockerfile示例一（通过VOLUME添加卷挂载）" class="headerlink" title="Dockerfile示例一（通过VOLUME添加卷挂载）"></a>Dockerfile示例一（通过VOLUME添加卷挂载）</h3><pre class="line-numbers language-shell"><code class="language-shell">FROM centos# 匿名挂载VOLUME ["volume01","volume02"]CMD echo "--------end---------"CMD /bin/bash# 构建# -f Dockerfile文件的地址# -t 生成的镜像名docker build -f /home/dockerfile1 -t my-centos:1.0 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dockerfile示例二（为centos添加vim等命令）"><a href="#Dockerfile示例二（为centos添加vim等命令）" class="headerlink" title="Dockerfile示例二（为centos添加vim等命令）"></a>Dockerfile示例二（为centos添加vim等命令）</h3><pre class="line-numbers language-shell"><code class="language-shell">FROM centosMAINTAINER zzl<1056674185@qq.com>ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-tools# 暴露端口EXPOSE 80CMD echo $MYPATHCMD echo "----end----"CMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dockerfile示例三（CMD和ENTRYPOINT的区别）"><a href="#Dockerfile示例三（CMD和ENTRYPOINT的区别）" class="headerlink" title="Dockerfile示例三（CMD和ENTRYPOINT的区别）"></a>Dockerfile示例三（CMD和ENTRYPOINT的区别）</h3><pre class="line-numbers language-shell"><code class="language-shell"># 编写 dockerfile 文件FROM centos# ls -aCMD ["ls","-a"]# 或ENTRYPOINT ["ls","-a"]# 构建镜像docker build -f dockerfile-cmd-test -t cmdtest .# run 运行 CMD会报错 / ENTRYPOINT会执行ls -aldocker run 容器id -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dockerfile示例四（制作tomcat镜像）"><a href="#Dockerfile示例四（制作tomcat镜像）" class="headerlink" title="Dockerfile示例四（制作tomcat镜像）"></a>Dockerfile示例四（制作tomcat镜像）</h3><pre class="line-numbers language-shell"><code class="language-shell"># 准备压缩包# apache-tomcat-9.0.35.tar.gz# jdk-8u251-linux-x64.tar.gz# --------编写Dockerfile-----------FROM centosMAINTAINER zzl<1056674185@qq.com># 拷贝当前目录下文件到usr中COPY readme.txt /usr/local/readme.txtADD jdk-8u251-linux-x64.tar.gz /usr/local/ADD apache-tomcat-9.0.35.tar.gz /usr/local/RUN yum -y install vimENV MYPATH /usr/localWORKDIR $MYPATH# 配置环境ENV JAVA_HOME /usr/local/jdk1.8.0_251ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.35ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.35ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/binEXPOSE 8080# 执行tomcatCMD /usr/local/apache-tomcat-9.0.35/bin/startup.sh && tail -F /url/local/apache-tomcat-9.0.35/bin/logs/catalina.out# -----------Dockerfile end------------# builddocker build -t mytomcat .# 运行自制镜像docker run -d -p 9000:8080 --name mytomcat -v /home/zzl/build/tomcat/test:/usr/local/apache-tomcat-9.0.35/webapps/test -v /home/zzl/build/tomcat/logs/:/usr/local/apache-tomcat-9.0.35/logs mytomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h2><pre class="line-numbers language-shell"><code class="language-shell"># 创建网络# --driver bridge    默认桥接# --subnet 192.168.0.0/16    子网ip# --gateway 192.168.0.1    网关docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet# 启动容器docker run -d -P --name mynet-tomcat --net mynet tomcat# 网卡相连docker network connect esnet <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsoup实战（爬取京东商品信息）</title>
      <link href="/2020/05/26/Jsoup%E5%AE%9E%E6%88%98/"/>
      <url>/2020/05/26/Jsoup%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="导入Jsoup依赖"><a href="#导入Jsoup依赖" class="headerlink" title="导入Jsoup依赖"></a><strong>导入Jsoup依赖</strong></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 解析网页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a><strong>开始</strong></h3><p>首先我们通过京东的商品搜索地址，拿到document对象</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"https://search.jd.com/Search?keyword=java"</span><span class="token punctuation">;</span>Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Alphag0/pic@master/jsoup/20200526161140.png" alt=""></p><p>在浏览器中检查元素可以看到我们要找的商品列表是一个id=”J_goodsList”的div，那么我们可以通过id获取j_goodsList元素，再通过li标签获取j_goodsList下面的每一个li元素：</p><pre class="line-numbers language-java"><code class="language-java">Element j_goodsList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"J_goodsList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Elements elements <span class="token operator">=</span> j_goodsList<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Alphag0/pic@master/jsoup/20200526162017.png" alt=""></p><p>拿到每个商品元素后，我们再次展开可以看到又是一个个的div，这里我们可以通过class来获取，而我是直接通过img标签获取的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String img <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String price <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByClass</span><span class="token punctuation">(</span><span class="token string">"p-price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String title <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByClass</span><span class="token punctuation">(</span><span class="token string">"p-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-shell"><code class="language-shell">//img10.360buyimg.com/n7/jfs/t1/26339/8/10661/124305/5c8af829E4470835f/99742c91174d3d7a.jpgJava从入门到精通（第5版） Java从入门到精通（第5版）￥66.30 ￥64.30================//img11.360buyimg.com/n7/jfs/t1/57972/5/2455/276693/5d036b6cEbb183907/b8c1845431ba6753.jpg零基础学Java（全彩版） 零基础学Java（全彩版）￥55.80================//img10.360buyimg.com/n7/jfs/t1/41570/5/1180/179278/5cc54479E7522cee3/d5b50e571ccc926e.jpg疯狂Java讲义（第5版）（含DVD光盘一张）￥127.90================//img13.360buyimg.com/n7/jfs/t1/102900/26/2632/158701/5dd601a5E9ed34588/596e136d4a144cae.jpgJava核心技术 卷I 基础知识（原书第11版） CoreJava第11版，Jolt大奖获奖作品，与Java编程思想、EffectiveJava、深入理解Java虚拟机堪称：Java四大名著￥141.60================//img12.360buyimg.com/n7/jfs/t1/37162/11/8870/130954/5ccfe770E9ce31151/74a5a5dcd83ecc09.jpgJava从入门到项目实战（全程视频版） 编程入门/IT计算机书籍 65小时全程视频教学，著名软件技术讲师20年Java经验集成之作，配套源代码、课件、自测题、面试题，赠Java工程师学习路线、职业规划、自我修养视频课￥94.80================//img14.360buyimg.com/n7/jfs/t2191/111/699154754/198998/32d7bfe0/5624b582Nbc01af5b.jpgJava编程思想（第4版） Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉￥102.60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们将爬到的数据放到封装到一个对象中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String img<span class="token punctuation">;</span>    <span class="token keyword">private</span> String price<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽取出一个工具类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HtmlParseUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlParseUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseJD</span><span class="token punctuation">(</span><span class="token string">"理财"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Content<span class="token operator">></span> <span class="token function">parseJD</span><span class="token punctuation">(</span>String keyword<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 要解析的网址 https://search.jd.com/Search?keyword=java</span>        String url <span class="token operator">=</span> <span class="token string">"https://search.jd.com/Search?keyword="</span> <span class="token operator">+</span> keyword<span class="token punctuation">;</span>        Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Element j_goodsList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"J_goodsList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Elements elements <span class="token operator">=</span> j_goodsList<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Content<span class="token operator">></span> goodsList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Element element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String img <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String price <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByClass</span><span class="token punctuation">(</span><span class="token string">"p-price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String title <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByClass</span><span class="token punctuation">(</span><span class="token string">"p-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Content content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Content</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> img<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>            goodsList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> goodsList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次运行查看结果：</p><pre class="line-numbers language-shell"><code class="language-shell">Content(title=稳赚：提升理财收益的投资工具, img=//img14.360buyimg.com/n1/s200x200_jfs/t1/32814/25/3917/206646/5c78c85aEc8bb3fda/78e04a9362cca59d.jpg, price=￥44.90)Content(title=财富自由（全球畅销500万册的经典理财图书） 财富自由（全球畅销500万册的经典理财图书）, img=//img10.360buyimg.com/n1/s200x200_jfs/t1/39027/26/11240/417294/5d26a434Ee2da780e/808a000ea395d03a.jpg, price=￥55.40 ￥53.70)Content(title=富爸爸穷爸爸（新版）本版随书附赠价值198元的“小白财商在线课程” 京东投资理财类畅销图书！富爸爸系列已发行多个国家和地区，助力众多读者的财务自由之路。, img=//img14.360buyimg.com/n1/s200x200_jfs/t1/59464/32/15191/425483/5dcbbae9Ec13d0c1b/3cca5be5d0c35f80.jpg, price=￥84.60 ￥82.10)Content(title=定投十年财务自由：省心省时省力懒人专享的理财书 省心省时省力，懒人专享的理财术。银行螺丝钉继《指数基金投资指南》后又一力作。雪球网创始人方三文做序推荐！, img=//img14.360buyimg.com/n1/s200x200_jfs/t1/71756/19/10829/141317/5d8442cdEb5ca2d93/6ced9af1e2053d00.jpg, price=￥56.10)Content(title=小狗钱钱套装（套装全2册：小狗钱钱+小狗钱钱2）吉娅的“金钱童话”关于财富，关于成长，关于诚实，关于爱 小狗钱钱套装（套装全2册：小狗钱钱+小狗钱钱2）吉娅的“金钱童话”关于财富，关于成长，关于诚实，关于爱, img=//img12.360buyimg.com/n1/s200x200_jfs/t16762/26/2374139683/314572/82077844/5af006b3N63e43e5c.jpg, price=￥60.80)Content(title=财务自由之路（套装3册） 财务自由之路（套装3册）, img=//img10.360buyimg.com/n1/s200x200_jfs/t1/15561/3/7270/383011/5c6a053fE76082f98/c5ea5c41fa71cadd.jpg, price=￥135.00 ￥131.00)Content(title=老百姓看得懂的银行理财产品：术语解析、常见风险与购买技巧, img=//img12.360buyimg.com/n1/s200x200_jfs/t24304/365/2619030930/220965/d5c6bf6/5b88e375N92f3475e.jpg, price=￥41.60)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsoup基础</title>
      <link href="/2020/05/26/Jsoup%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/05/26/Jsoup%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Jsoup概述"><a href="#一、Jsoup概述" class="headerlink" title="一、Jsoup概述"></a>一、Jsoup概述</h2><blockquote><p> jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p></blockquote><blockquote><p>Jsoup的操作主要由三部分组成：</p><ol><li>从字符串，网页，本地文件等方式生成Document</li><li>在生成Doucment后，根据Dom和css或类似jquery的selector语法获取Element，然后再从Elements中获取节点属性、文本、html</li><li>对Element的进行操作，包括HTML的值、节点内容的值和设置节点属性的值</li></ol></blockquote><h3 id="Jsoup依赖"><a href="#Jsoup依赖" class="headerlink" title="Jsoup依赖"></a>Jsoup依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 解析网页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、加载文档"><a href="#二、加载文档" class="headerlink" title="二、加载文档"></a>二、加载文档</h2><h3 id="1、从URL加载文档"><a href="#1、从URL加载文档" class="headerlink" title="1、从URL加载文档"></a>1、从URL加载文档</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式一 使用`Jsoup.connect()`方法从URL加载HTML。</span>Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"https://blog4zhan.cn/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式二 使用Jsoup.parse()方法从URL加载HTML。</span>Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// param2：等待超时时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、从文件加载文档"><a href="#2、从文件加载文档" class="headerlink" title="2、从文件加载文档"></a>2、从文件加载文档</h3><pre class="line-numbers language-java"><code class="language-java">Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span> <span class="token string">"D:/temp/index.html"</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"utf-8"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、从String加载文档"><a href="#3、从String加载文档" class="headerlink" title="3、从String加载文档"></a>3、从String加载文档</h3><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"&lt;html>&lt;head>&lt;title>First parse&lt;/title>&lt;/head>"</span>                    <span class="token operator">+</span> <span class="token string">"&lt;body>&lt;p>Parsed HTML into a doc.&lt;/p>&lt;/body>&lt;/html>"</span><span class="token punctuation">;</span>Document document <span class="token operator">=</span> Jsoup<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、获取元素以及节点属性、文本、html"><a href="#三、获取元素以及节点属性、文本、html" class="headerlink" title="三、获取元素以及节点属性、文本、html"></a>三、获取元素以及节点属性、文本、html</h2><pre class="line-numbers language-java"><code class="language-java">Elements links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"a[href]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过选择器，注意语法</span>Element formElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"loginForm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过id获取元素</span>Elements inputElements <span class="token operator">=</span> formElement<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过标签获取元素</span>String title <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByClass</span><span class="token punctuation">(</span><span class="token string">"p-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过class获取第一个元素，获得文本</span>String img <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getElementsByTag</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// attr：获取元素指定属性值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2020/02/24/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/02/24/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-存储引擎"><a href="#1-存储引擎" class="headerlink" title="1.存储引擎"></a>1.存储引擎</h2><blockquote><p>概念：数据库存储引擎是数据库底层软件组织,数据库管理系统(DBMS)使用数据引擎进行创建、查询、更新和删除数据。不同的存储引擎提供不同的存储机制、索引技5、锁定水平等功能,使用不同的存储引擎,还可以获得特定的功能。现在许多不同的数据库管理系统都支持多种不同的数据引擎。存储引擎主要有: 1. Mylsam , 2. InnoDB, 3. Memory, 4. Archive, 5. Federated</p></blockquote><h3 id="InnoDB（B-树）"><a href="#InnoDB（B-树）" class="headerlink" title="InnoDB（B+树）"></a>InnoDB（B+树）</h3><blockquote><p>InnoDB 底层存储结构为B+树， B树的每个节点对应innodb的一个page，page大小是固定的，一般设为16k。其中非叶子节点只有键值，叶子节点包含完成数据。</p><p>适用场景：<br>1）经常更新的表，适合处理多重并发的更新请求。<br>2）支持事务。<br>3）可以从灾难中恢复（通过bin-log日志等）。<br>4）外键约束。只有他支持外键。<br>5）支持自动增加列属性auto_increment。</p></blockquote><h3 id="MyIASM"><a href="#MyIASM" class="headerlink" title="MyIASM"></a>MyIASM</h3><blockquote><p>MyIASM是MySQL默认的引擎,但是它没有提供对数据库事务的支持,也不支持行级锁和外键,因此当INSERT(插入)或UPDATE(更新)数据时即写操作需要锁定整个表,效率便会低一些。ISAM执行读取操作的速度很快,而且不占用大量的内存和存储资源。在设计之初就预想数据组织成有固定长度的记录,按顺序存储的。—ISAM是一种静态索引结构。</p><p>缺点是它不支持事务处理。</p></blockquote><h2 id="2-索引"><a href="#2-索引" class="headerlink" title="2.索引"></a>2.索引</h2><p>索引（Index）是帮助MySQL高效获取数据的数据结构。常见的查询算法,顺序查找,二分查找,二叉排序树查找,哈希散列法,分块查找,平衡多路搜索树B树（B-tree）</p><h2 id="3-数据库三大范式"><a href="#3-数据库三大范式" class="headerlink" title="3.数据库三大范式"></a>3.数据库三大范式</h2><p>第一范式:(确保每列保持原子性)所有字段值都是不可分解的原子值。</p><p>第二范式:(确保表中的每列都和主键相关)在一个数据库表中,一个表中只能保存一种数据,不可以把多种数据保存在同一张数据库表中。</p><p>第三范式:(确保每列都和主键列直接相关,而不是间接相关)数据表中的每一列数据都和主键直接相关,而不能间接相关。</p><h2 id="4-事务"><a href="#4-事务" class="headerlink" title="4.事务"></a>4.事务</h2><blockquote><p>事务(TRANSACTION)是作为单个逻辑工作单元执行的一系列操作，这些操作作为一个整体一起向系统提交，要么都执行、要么都不执行 。事务是一个不可分割的工作逻辑单元</p></blockquote><h3 id="四大属性（ACID）"><a href="#四大属性（ACID）" class="headerlink" title="四大属性（ACID）"></a>四大属性（ACID）</h3><ul><li><p>原子性（Atomicity）</p><p>事务是一个完整的操作。事务的各步操作是不可分的（原子的）；要么都执行，要么都不执行。</p></li><li><p>一致性（Consistency）</p><p>当事务完成时，数据必须处于一致状态。</p></li><li><p>隔离性（Isolation）</p><p>对数据进行修改的所有并发事务是彼此隔离的，这表明事务必须是独立的，它不应以任何方式依赖或影响其他事务。</p></li><li><p>永久性（Durability）</p><p>事务完成后，它对数据库的修改被永久保持，事务日志能够保持事务的永久性。</p></li></ul><h2 id="5-存储过程-特定功能的SQL-语句集"><a href="#5-存储过程-特定功能的SQL-语句集" class="headerlink" title="5.存储过程(特定功能的SQL 语句集)"></a>5.存储过程(特定功能的SQL 语句集)</h2><p>一组为了完成特定功能的SQL 语句集，存储在数据库中，经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。</p><p>存储过程优化思路：</p><ol><li>尽量利用一些sql语句来替代一些小循环，例如聚合函数，求平均函数等。</li><li>中间结果存放于临时表，加索引。</li><li>少使用游标。sql是个集合语言，对于集合运算具有较高性能。而cursors是过程运算。比如对一个100万行的数据进行查询。游标需要读表100万次，而不使用游标则只需要少量几次读取。</li><li>事务越短越好。sqlserver支持并发操作。如果事务过多过长，或者隔离级别过高，都会造成并发操作的阻塞，死锁。导致查询极慢，cpu占用率极地。</li><li>使用try-catch处理错误异常。</li><li>查找语句尽量不要放在循环内。</li></ol><h2 id="6-触发器-一段能自动执行的程序"><a href="#6-触发器-一段能自动执行的程序" class="headerlink" title="6.触发器(一段能自动执行的程序)"></a>6.触发器(一段能自动执行的程序)</h2><p>触发器是一段能自动执行的程序，是一种特殊的存储过程，触发器和普通的存储过程的区别是：触发器是当对某一个表进行操作时触发。诸如：update、insert、delete这些操作的时候，系统会自动调用执行该表上对应的触发器。SQL Server 2005中触发器可以分为两类：DML触发器和DDL触发器，其中DDL触发器它们会影响多种数据定义语言语句而激发，这些语句有create、alter、drop语句。</p><h2 id="7-数据库并发策略"><a href="#7-数据库并发策略" class="headerlink" title="7.数据库并发策略"></a>7.数据库并发策略</h2><blockquote><p>并发控制一般采用三种方法，分别是乐观锁和悲观锁以及时间戳。</p></blockquote><h3 id="7-1乐观锁"><a href="#7-1乐观锁" class="headerlink" title="7.1乐观锁"></a>7.1乐观锁</h3><p>乐观锁认为一个用户读数据的时候，别人不会去写自己所读的数据；悲观锁就刚好相反，觉得自己读数据库的时候，别人可能刚好在写自己刚读的数据，其实就是持一种比较保守的态度；时间戳就是不加锁，通过时间戳来控制并发出现的问题。</p><h3 id="7-2悲观锁"><a href="#7-2悲观锁" class="headerlink" title="7.2悲观锁"></a>7.2悲观锁</h3><p>悲观锁就是在读取数据的时候，为了不让别人修改自己读取的数据，就会先对自己读取的数据加锁，只有自己把数据读完了，才允许别人修改那部分数据，或者反过来说，就是自己修改某条数据的时候，不允许别人读取该数据，只有等自己的整个事务提交了，才释放自己加上的锁，才允许其他用户访问那部分数据。</p><h3 id="7-3时间戳"><a href="#7-3时间戳" class="headerlink" title="7.3时间戳"></a>7.3时间戳</h3><p>时间戳就是在数据库表中单独加一列时间戳，比如“TimeStamp”，每次读出来的时候，把该字段也读出来，当写回去的时候，把该字段加1，提交之前 ，跟数据库的该字段比较一次，如果比数据库的值大的话，就允许保存，否则不允许保存，这种处理方法虽然不使用数据库系统提供的锁机制，但是这种方法可以大大提高数据库处理的并发量。</p><p>以上悲观锁所说的加“锁”，其实分为几种锁，分别是：排它锁（写锁）和共享锁（读锁）。</p><h2 id="8-数据库锁"><a href="#8-数据库锁" class="headerlink" title="8.数据库锁"></a>8.数据库锁</h2><h3 id="8-1行级锁"><a href="#8-1行级锁" class="headerlink" title="8.1行级锁"></a>8.1行级锁</h3><p>行级锁是一种排他锁，防止其他事务修改此行；在使用以下语句时，Oracle会自动应用行级锁：</p><ol><li>INSERT、UPDATE、DELETE、SELECT … FOR UPDATE [OF columns] [WAIT n | NOWAIT];</li><li>SELECT … FOR UPDATE语句允许用户一次锁定多条记录进行更新</li><li>使用COMMIT或ROLLBACK语句释放锁。</li></ol><h3 id="8-2表级锁"><a href="#8-2表级锁" class="headerlink" title="8.2表级锁"></a>8.2表级锁</h3><p>表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。</p><h3 id="8-3页级锁"><a href="#8-3页级锁" class="headerlink" title="8.3页级锁"></a>8.3页级锁</h3><p>页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁</p><h2 id="9-基于Redis分布式锁"><a href="#9-基于Redis分布式锁" class="headerlink" title="9.基于Redis分布式锁"></a>9.基于Redis分布式锁</h2><ol><li>获取锁的时候，使用setnx（SETNX key val：当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0）加锁，锁的value值为一个随机生成的UUID，在释放锁的时候进行判断。并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁。<br>13/04/2018 Page 220 of 283</li><li>获取锁的时候调用setnx，如果返回0，则该锁正在被别人使用，返回1则成功获取锁。 还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li><li>释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。</li></ol><h2 id="10-分区分表"><a href="#10-分区分表" class="headerlink" title="10.分区分表"></a>10.分区分表</h2><p>分库分表有垂直切分和水平切分两种。</p><ul><li>垂直切分(按照功能模块)<br>将表按照功能模块、关系密切程度划分出来，部署到不同的库上。例如，我们会建立定义数据库workDB、商品数据库payDB、用户数据库userDB、日志数据库logDB等，分别用于存储项目数据定义表、商品定义表、用户数据表、日志数据表等。</li><li>水平切分(按照规则划分存储)<br>当一个表中的数据量过大时，我们可以把该表的数据按照某种规则，例如userID散列，进行划分，然后存储到多个结构相同的表，和不同的库上。</li></ul><h2 id="11-两阶段提交协议"><a href="#11-两阶段提交协议" class="headerlink" title="11.两阶段提交协议"></a>11.两阶段提交协议</h2><p>分布式事务是指会涉及到操作多个数据库的事务,在分布式系统中，各个节点之间在物理上相互独立，通过网络进行沟通和协调。</p><p>XA 就是 X/Open DTP 定义的交易中间件与数据库之间的接口规范（即接口函数），交易中间件用它来通知数据库事务的开始、结束以及提交、回滚等。 XA 接口函数由数据库厂商提供。</p><p>二阶段提交(Two-phaseCommit)是指，在计算机网络以及数据库领域内，为了使基于分布式系统架构下的所有节点在进行事务提交时保持一致性而设计的一种算法(Algorithm)。通常，二阶段提交也被称为是一种协议(Protocol))。在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为协调者的组件来统一掌控所有节点(称作参与者)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。因此，二阶段提交的算法思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。</p><h3 id="11-1准备阶段"><a href="#11-1准备阶段" class="headerlink" title="11.1准备阶段"></a>11.1准备阶段</h3><p>事务协调者(事务管理器)给每个参与者(资源管理器)发送Prepare消息，每个参与者要么直接返回失败(如权限验证失败)，要么在本地执行事务，写本地的redo和undo日志，但不提交，到达一种“万事俱备，只欠东风”的状态。</p><h3 id="11-2提交阶段"><a href="#11-2提交阶段" class="headerlink" title="11.2提交阶段"></a>11.2提交阶段</h3><p>如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:必须在最后阶段释放锁资源)</p><h3 id="11-3缺点"><a href="#11-3缺点" class="headerlink" title="11.3缺点"></a>11.3缺点</h3><ul><li>同步阻塞问题<br>1、 执行过程中，所有参与节点都是事务阻塞型的。</li><li>单点故障<br>2、 由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。</li><li>数据不一致（脑裂问题）<br>3、 在二阶段提交的阶段二中，当协调者向参与者发送commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者发生了故障，导致只有一部分参与者接受到了commit请求。于是整个分布式系统便出现了数据部一致性的现象(脑裂现象)。</li><li>二阶段无法解决的问题（数据状态不确定）<br>4、 协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</li></ul><h2 id="12-三阶段提交协议"><a href="#12-三阶段提交协议" class="headerlink" title="12.三阶段提交协议"></a>12.三阶段提交协议</h2><blockquote><p>三阶段提交（Three-phase commit），也叫三阶段提交协议（Three-phase commit protocol），是二阶段提交（2PC）的改进版本。<br>与两阶段提交不同的是，三阶段提交有两个改动点。<br>1、引入超时机制。同时在协调者和参与者中都引入超时机制。<br>2、在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。也就是说，除了引入超时机制之外，3PC把2PC的准备阶段再次一分为二，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。</p></blockquote><h3 id="12-1CanCommit阶段"><a href="#12-1CanCommit阶段" class="headerlink" title="12.1CanCommit阶段"></a>12.1CanCommit阶段</h3><p>协调者向参与者发送commit请求，参与者如果可以提交就返回Yes响应，否则返回No响应。</p><h3 id="12-2PreCommit阶段"><a href="#12-2PreCommit阶段" class="headerlink" title="12.2PreCommit阶段"></a>12.2PreCommit阶段</h3><p>协调者根据参与者的反应情况来决定是否可以继续进行，有以下两种可能。假如协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务的预执行假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。</p><h3 id="12-3doCommit阶段"><a href="#12-3doCommit阶段" class="headerlink" title="12.3doCommit阶段"></a>12.3doCommit阶段</h3><p>该阶段进行真正的事务提交，主要包含1.协调这发送提交请求 2.参与者提交事务 3.参与者响应反馈（ 事务提交完之后，向协调者发送Ack响应。）4.协调者确定完成事务。</p><h2 id="13-柔性事务"><a href="#13-柔性事务" class="headerlink" title="13.柔性事务"></a>13.柔性事务</h2><blockquote><p>在电商领域等互联网场景下，传统的事务在数据库性能和处理能力上都暴露出了瓶颈。在分布式领域基于CAP理论以及BASE理论，有人就提出了 柔性事务 的概念。CAP（一致性、可用性、分区容忍性）理论大家都理解很多次了，这里不再叙述。说一下BASE理论，它是在CAP理论的基础之上的延伸。包括 基本可用（Basically Available）、柔性状态（Soft State）、最终一致性（Eventual Consistency）。<br>通常所说的柔性事务分为：两阶段型、补偿型、异步确保型、最大努力通知型几种。</p></blockquote><ul><li>两阶段型<br>1、 就是分布式事务两阶段提交，对应技术上的XA、JTA/JTS。这是分布式环境下事务处理的典型模式。</li><li>补偿型<br>2、 TCC型事务（Try/Confirm/Cancel）可以归为补偿型。WS-BusinessActivity提供了一种基于补偿的long-running的事务处理模型。服务器A发起事务，服务器B参与事务，服务器A的事务如果执行顺利，那么事务A就先行提交，如果事务B也执行顺利，则事务B也提交，整个事务就算完成。但是如果事务B执行失败，事务B本身回滚，这时事务A已经被提交，所以需要执行一个补偿操作，将已经提交的事务A执行的操作作反操作，恢复到未执行前事务A的状态。这样的SAGA事务模型，是牺牲了一定的隔离性和一致性的，但是提高了long-running事务的可用性。</li><li>异步确保型<br>3、 通过将一系列同步的事务操作变为基于消息执行的异步操作, 避免了分布式事务中的同步阻塞操作的影响。</li><li>最大努力通知型（多次尝试）<br>4、 这是分布式事务中要求最低的一种, 也可以通过消息中间件实现, 与前面异步确保型操作不同的一点是, 在消息由MQ Server投递到消费者之后, 允许在达到最大重试次数之后正常结束事务。</li></ul><h2 id="14-CAP"><a href="#14-CAP" class="headerlink" title="14.CAP"></a>14.CAP</h2><blockquote><p>CAP原则又称CAP定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p></blockquote><ul><li><p>一致性（C）：</p><p>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</p></li><li><p>可用性（A）：</p><p>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</p></li><li><p>分区容忍性（P）：</p><p>以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法</title>
      <link href="/2020/02/13/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/13/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="【一】冒泡排序"><a href="#【一】冒泡排序" class="headerlink" title="【一】冒泡排序"></a>【一】冒泡排序</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 冒泡排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> didSwap<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        didSwap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                didSwap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>didSwap <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 交换 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【二】选择排序"><a href="#【二】选择排序" class="headerlink" title="【二】选择排序"></a>【二】选择排序</h2><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 选择排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> null <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【三】插入排序"><a href="#【三】插入排序" class="headerlink" title="【三】插入排序"></a>【三】插入排序</h2><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 插入排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【四】归并排序"><a href="#【四】归并排序" class="headerlink" title="【四】归并排序"></a>【四】归并排序</h2><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 归并排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sortProcess</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 归并排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sortProcess</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>R <span class="token operator">-</span> L<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sortProcess</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sortProcess</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 归并排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> help<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>L <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【五】快速排序"><a href="#【五】快速排序" class="headerlink" title="【五】快速排序"></a>【五】快速排序</h2><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 快速排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 快速排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> less <span class="token operator">=</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> more <span class="token operator">=</span> R<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">++</span>less<span class="token punctuation">,</span> L<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            L<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> more<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>less <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 交换 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【六】堆排序"><a href="#【六】堆排序" class="headerlink" title="【六】堆排序"></a>【六】堆排序</h2><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 堆排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">heapIfy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 堆排序 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 堆排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapIfy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> largest<span class="token punctuation">;</span>        left <span class="token operator">=</span> index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【七】计数排序"><a href="#【七】计数排序" class="headerlink" title="【七】计数排序"></a>【七】计数排序</h2><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 计数排序 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网剑指Offer</title>
      <link href="/2020/02/10/%E7%89%9B%E5%AE%A2%E7%BD%91%E5%89%91%E6%8C%87Offer/"/>
      <url>/2020/02/10/%E7%89%9B%E5%AE%A2%E7%BD%91%E5%89%91%E6%8C%87Offer/</url>
      
        <content type="html"><![CDATA[<h2 id="【1】二维数组中的查找"><a href="#【1】二维数组中的查找" class="headerlink" title="【1】二维数组中的查找"></a>【1】二维数组中的查找</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数组从左到右递增，从上到下递增，所以可以从左下或右上开始判断，以右上为例，当目标数比数组数小时j--，当目标数比数组数大时i++</span><span class="token comment" spellcheck="true">//while在数组内时，判断目标值是否存在</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">_01FindArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【2】替换空格"><a href="#【2】替换空格" class="headerlink" title="【2】替换空格"></a>【2】替换空格</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遍历字符串变量，记录空格个数，计算出替换后的变量长度并设置，第二次从后往前遍历如果不是空格就直接设置，如果是空格就设置02%</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">_02Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"We Are Happy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>StringBuffer str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> null <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> spaceNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> oldLength <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                spaceNumber<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>spaceNumber<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> newLength <span class="token operator">=</span> oldLength<span class="token operator">+</span>spaceNumber<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> length <span class="token operator">=</span> oldLength<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> length <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> length<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token operator">--</span>newLength<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token operator">--</span>newLength<span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token operator">--</span>newLength<span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token operator">--</span>newLength<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【3】从尾到头打印链表"><a href="#【3】从尾到头打印链表" class="headerlink" title="【3】从尾到头打印链表"></a>【3】从尾到头打印链表</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>输入一个链表，按链表从尾到头的顺序返回一 个ArrayList。</p></blockquote><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//利用栈的先进后出实现反转链表</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMap</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode listNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>listNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>ListNode listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>listNode<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            listNode<span class="token operator">=</span>listNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用大全</title>
      <link href="/2020/02/02/SpringBoot%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/02/02/SpringBoot%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot使用大全"><a href="#SpringBoot使用大全" class="headerlink" title="SpringBoot使用大全"></a>SpringBoot使用大全</h1><blockquote><p>​        Spring Boot是由Pivotal团队提供的全新框架,其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置,从而使开发人员不再需要定义样板化的配置。通过这种方式, Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。<br>​        spring大家都知道, boot是启动的意思。所以, spring boot其实就是一个启动spring项目的一个工具而已。从最根本上来讲, Spring Boot就是一些库的集合,它能够被任意项目的构建系统所使用。以前在写spring项目的时候,要配置各种xml文件,还记得曾经被ssh框架支配的恐惧。随着spring3, spring4的相继推出,约定大于配置逐渐成为了开发者的共识,大家也渐渐的从写xm1转为写各种注解，在spring4的项目里,你甚至可以一行xml都不写。<br>​        虽然spring4已经可以做到无xml,但写一个大项目需要茫茫多的包, maven配置要写几百行,也是一件很可怕的事。<br>现在,快速开发一个网站的平台层出不穷, nodejs, php等虎视眈眈,并且脚本语言渐渐流行了起来(Node Js, Ruby, Groovy, Scala等) , spring的开发模式越来越显得笨重。<br>​        在这种环境下, spring boot伴随着spring4一起出现了。springboot 的使用很简单,我们只需要将原先我们的xm1配置中的内容通过java方式配置过去即可,大部分配置已经被springboot 自己装配,我们只需要将需要我们自己写的配置单独写出来即可</p></blockquote><p><strong>导入SpringBoot依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置启动类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootStartApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootStartApp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类型安全的配置</strong></p><blockquote><p>使用<code>@value</code>注入每个自定义配置在项目中显得很麻烦，当自定义属性很多时需要注入很多次。</p><p>SpringBoot提供了基于 类型安全的配置方式，通过<code>@ConfigurationProperties</code>将properties中的属性和一个Bean的属性关联，从而实现类型安全的配置。</p><p>例如：@ConfigurationProperties(prefix=”book”)（<strong>注意类型安全属性需要设置get和set方法</strong>）</p></blockquote><p><strong>profile配置</strong></p><blockquote><p>profile是针对在不同的环境对不同的配置提供支持的，全局profile配置使用application-*.properties（application-prod.properties，application-dev.properties）</p><p>通过在application.properties中设置<code>spring.profiles.active=prod</code>来指定活动中的profile</p></blockquote><p><strong>静态资源的访问</strong></p><blockquote><p>默认SpringBoot从classpath的<code>/static</code>和<code>/public</code>或<code>/WETA-INF/resources</code>文件夹</p><p>也可以通过<code>spring.resources.static-locations=classpath:/static/</code>设置静态资源路径</p></blockquote><p><strong>消息转换器</strong></p><blockquote><p>在类中添加<code>@Bean</code>注解，就会被SpringBoot自动加入到容器中，SpringBoot默认自动配置了消息转换器</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义消息转换器</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> StringHttpMessageConverter <span class="token function">stringHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    StringHttpMessageConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">(</span>Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> converter<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建父工程</strong>（<strong>打包方式为pom</strong>）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合Test"><a href="#整合Test" class="headerlink" title="整合Test"></a>整合Test</h2><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编写测试类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> MyController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebAppConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MyController myController<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TestCase<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myController<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p><strong>导入依赖</strong>（<strong>start-web默认导入此依赖</strong>）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Logback日志--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局配置文件</strong></p><pre class="line-numbers language-yml"><code class="language-yml">logging:  level:    root: warn    org:      springframework:        web: debug  file: e:\\info.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如需自定义配置文件可优先使用<code>-spring</code>文件名作为日志配置（例如<code>logback-spring.xml</code>）</p><p>也可以通过<code>logging.config=classpath:logging-config.xml</code>自定义文件名字</p></blockquote><p><strong>使用</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.42<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局配置文件</strong></p><pre class="line-numbers language-yml"><code class="language-yml">spring:  datasource:    url: jdbc:mysql://127.0.0.1:3306/shopping    username: root    password: 1234    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: com.mysql.jdbc.Drivermybatis:  mapper-locations: classpath:mapping/*.xml #mapper文件位置  type-aliases-package: com.zzl.pojo #别名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合JSP"><a href="#整合JSP" class="headerlink" title="整合JSP"></a>整合JSP</h2><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--JSP--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>低版本需要导入插件</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--maven项目packaging为war类型时,必须要加这个插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>failOnMissingWebXml</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>failOnMissingWebXml</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局配置文件</strong></p><pre class="line-numbers language-yml"><code class="language-yml">spring:  mvc:    view:      prefix: /WEB-INF/jsp #前缀      suffix: .jsp #后缀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Freemarker模板引擎"><a href="#Freemarker模板引擎" class="headerlink" title="Freemarker模板引擎"></a>Freemarker模板引擎</h2><blockquote><p>SpringBoot官方推荐使用模板引擎，而不是jsp<br>SpringBoot默认在resources/templates下找模板，默认扩展名.ftl<br>优点：使用简单，性能比使用jsp要高</p></blockquote><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Freemarker模板引擎--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局配置文件</strong></p><pre class="line-numbers language-yml"><code class="language-yml">spring:  freemarker:    suffix: .html #模板后缀    template-loader-path: classpath:/templates #模板存放位置    cache: true #是否缓存    content-type: text/html #内容格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mail邮件发送"><a href="#mail邮件发送" class="headerlink" title="mail邮件发送"></a>mail邮件发送</h2><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 邮件依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局配置文件</strong></p><pre class="line-numbers language-yml"><code class="language-yml">spring:  mail:    host: smtp.126.com # smtp.163.com #     username: ***    password: ***    properties:      mail:        smtp:          auth: true          starttls:            enable: true            required: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单邮件发送"><a href="#简单邮件发送" class="headerlink" title="简单邮件发送"></a>简单邮件发送</h3><pre class="line-numbers language-java"><code class="language-java">EmailConfig类<span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.mail.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String emailFrom<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getEmailFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> emailFrom<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmailFrom</span><span class="token punctuation">(</span>String emailFrom<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emailFrom <span class="token operator">=</span> emailFrom<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>EmailServiceImpl类<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmailService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmailConfig emailConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JavaMailSender mailSender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//简单邮件的发送</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleMail</span><span class="token punctuation">(</span>String sendTo<span class="token punctuation">,</span> String title<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleMailMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>emailConfig<span class="token punctuation">.</span><span class="token function">getEmailFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>sendTo<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="带附件的邮件"><a href="#带附件的邮件" class="headerlink" title="带附件的邮件"></a>带附件的邮件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//带附件邮件发送</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentMail</span><span class="token punctuation">(</span>String sendTo<span class="token punctuation">,</span> String title<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MimeMessage msg <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>emailConfig<span class="token punctuation">.</span><span class="token function">getEmailFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>sendTo<span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"附件"</span><span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送模板邮件"><a href="#发送模板邮件" class="headerlink" title="发送模板邮件"></a>发送模板邮件</h3><pre class="line-numbers language-java"><code class="language-java">EmailServiceImpl类<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmailService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmailConfig emailConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JavaMailSender mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FreeMarkerConfigurer freeMarkerConfigurer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送模板邮件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTemplateMail</span><span class="token punctuation">(</span>String sendTo<span class="token punctuation">,</span> String title<span class="token punctuation">,</span> String info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MimeMessage msg <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>emailConfig<span class="token punctuation">.</span><span class="token function">getEmailFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>sendTo<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"湛湛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Template template <span class="token operator">=</span> freeMarkerConfigurer<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>            String html <span class="token operator">=</span> FreeMarkerTemplateUtils<span class="token punctuation">.</span><span class="token function">processTemplateIntoString</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>EmailController类<span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmailService emailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"template"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sendTemplateMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        emailService<span class="token punctuation">.</span><span class="token function">sendTemplateMail</span><span class="token punctuation">(</span><span class="token string">"1056674185@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"标题"</span><span class="token punctuation">,</span> <span class="token string">"info.ftl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote><p>starter-web默认自动导入文件上传依赖</p><p><strong>文件上传三要素</strong></p><ul><li>提供form表单,method必须是post</li><li>form表单的enctype必须是multipart/form-data</li><li>提供 input type=”file” 类型输入</li></ul></blockquote><p><strong>全局配置文件</strong></p><pre class="line-numbers language-yml"><code class="language-yml">multipart:  maxFileSize: 1MB #单个文件大小  maxRequestSize: 2MB #文件总大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>代码实现</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            文件 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"upload"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">uploadFile</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String dir <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File fileDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fileDir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String fileSuffix <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fileSuffix<span class="token punctuation">;</span>            File files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileDir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"上传失败"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>批量上传</strong></p><blockquote><p>批量上传只需把<code>MultipartFile file</code>变为<code>MultipartFile file[]</code>后逐个遍历即可。<br>注意<code>&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</code>中的<code>name</code>必须与<code>file</code>一致。</p></blockquote><h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><blockquote><ul><li>配置启动类注解<code>@EnableCaching</code>开启缓存</li><li>有<code>@Cacheable</code>注解的方法会走缓存</li><li>实体类需要实现<code>Serializable</code>接口</li></ul></blockquote><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 里面依赖了spring-data-redis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单机版配置</strong></p><pre class="line-numbers language-yml"><code class="language-yml">redis:  database: 0  host: 192.168.0.108  port: 8000  password:  jedis:    pool:      #最大连接数据库连接数,设 0 为没有限制      max-active: 8      #最大等待连接中的数量,设 0 为没有限制      max-idle: 8      #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。      max-wait: -1      #最小等待连接中的数量,设 0 为没有限制      min-idle: 0  timeout: 5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>集群版配置</strong></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.redis.cluter.nodes</span><span class="token punctuation">=</span><span class="token attr-value">***,***</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="整合ElasticSearch"><a href="#整合ElasticSearch" class="headerlink" title="整合ElasticSearch"></a>整合ElasticSearch</h2><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全局配置文件</strong></p><pre class="line-numbers language-yml"><code class="language-yml">spring:  data:    elasticsearch:      cluster-nodes: 127.0.0.1:9300 #java访问ip和端口号      cluster-name: elasticsearch      local: false #是否本地访问      repositories: #是否进行存储          enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM&amp;GC（五）GC垃圾回收器</title>
      <link href="/2020/01/17/JVM-GC%EF%BC%88%E4%BA%94%EF%BC%89GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
      <url>/2020/01/17/JVM-GC%EF%BC%88%E4%BA%94%EF%BC%89GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="GC垃圾回收器"><a href="#GC垃圾回收器" class="headerlink" title="GC垃圾回收器"></a>GC垃圾回收器</h1><blockquote><p>GC垃圾回收器是JVM中自动内存管理机制的具体实现，在HotSpot虚拟机中GC的工作主要划分为两大类，分别是内存动态分配和垃圾回收，在内存执行分配之前，GC首先会对内存空间进行划分，考虑到JVM中存活对象的生命周期会具有两极化，应该采取不同的垃圾收集策略，分代收集可以实现这个目标，目前几乎所有的GC都是采用分代收集算法执行垃圾回收</p><p>一般来说当内存空间中的内存消耗到达一定阈值之后，GC就会执行垃圾回收，而且回收算法必须非常准确，定不能造成内存中存活的对象被错误的回收掉，也不能造成已经死亡的对象没有及时回收，而且GC执行内存回收的时候应该做到高效，不应该导致程序长时间的暂停，以及要避免产生内存碎片，不过Gc回收垃圾的时候不可避免的会产生碎片，因为被回收的对象空间不是连续的，这样一来会导致没有足够的空间分配给大内存对象，不过可以通过压缩算法来消除碎片</p><p>可以通过以下六点来评估一个GC的性能</p><ol><li>吞吐量:程序的运行时间(程序时间+回收时间)</li><li>垃圾回收开销:吞吐量的补数，垃圾回收器所占时间与总时间的比例</li><li>暂停时间:执行垃圾回收的时候，程序的工作线程被暂停的时间</li><li>收集频率:相对于程序的执行，收集操作发生的频率</li><li>堆空间: Java堆占用的空间大小</li><li>快速:一个对象从创建到被回收所经历的时间</li></ol></blockquote><h2 id="垃圾回收器分类"><a href="#垃圾回收器分类" class="headerlink" title="垃圾回收器分类"></a>垃圾回收器分类</h2><p>由于JDK的高速迭代，Java到现在已经衍生了很多版本的Gc，比如Serial/Serial Old收集器，ParNew收集器，Paralle/Parallel Old收集器，CMS(Concurrent-Mark-Sweep)收集器，以及从JDK7U4版本开始的出现的GI(Garbage-First)收集器等</p><p>按照不同的划分角度，可以将GC分为不同的类型</p><p>按照<code>线程数</code>划分可以分为串行垃圾回收器和并行垃圾回收器</p><ul><li>串行回收指的是同一段时间内只允许一件事情发生，当有多个CPU的时候也只能有一个CPU用于执行垃圾回收操作，并且在执行回收的时候，程序中的工作线程会被暂停，回收结束后才会恢复，这就是串行回收，一般情况下串行回收被用在client模式下，和串行回收相反，并行回收可以使用多个CPU来执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然使用STW和复制算法串行回收有两个特点:首先它仅仅使用单个线程进行垃圾回收，其次它是独占式的垃圾回收方式</li><li>年轻代串行回收器使用复制算法，实现相对简单，逻辑处理特别高效，而且没有额外的线程切换开销，在诸如单CPU或者较小的应用内存等硬件平台，它的性能可以超过并行回收器并行收集器是工作在新生代垃圾回收器，它只是简单的将串行回收器多线程话，它的回收策略算法以及参数和串行一致，并行回收器也是独占式的回收器，在收集过程中，也会STw，不过在并发能力强的CPU上面，它产生的停顿时间小于串行收集器，效率更高</li></ul><p>按照<code>工作模式</code>分可以划分为并发式回收器和独占式回收器，并发式(注意不是并行)回收器与应用程序线程交替执行，以尽量减少应用程序的停顿时间，独占式垃圾回收器一旦运行就停止应用中的其他线程，直到回收结束</p><p>按照<code>碎片处理</code>方式分可以分为压缩式垃圾回收器和非压缩式垃圾回器，压缩式垃圾回收器会在回收完成后堆存货对象进行压缩整理，消除回收后的碎片，非压缩式的垃圾回收器不会进行此过程</p><p>按照<code>工作内存区间</code>划分又可以分为年轻代垃圾回收器和年老代垃圾回收器</p><h2 id="常见的垃圾回收器"><a href="#常见的垃圾回收器" class="headerlink" title="常见的垃圾回收器"></a>常见的垃圾回收器</h2><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a><strong>Serial收集器</strong></h3><p>​      串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。<strong>新生代、老年代使用**</strong>串行回收<strong><strong>；新生代复制算法、老年代</strong></strong>标记-压缩**；垃圾收集的过程中会Stop The World（服务暂停）</p><p>参数控制：-XX:+UseSerialGC  串行收集器</p><p>​                                       <img src="http://www.pianshen.com/images/647/9baf469eb409cb9fd00bbd2ee3f1330f.png" alt="img"></p><p><strong>优点：</strong>是单线程的  也就是说它在运行的时候，所有的线程都得等着它</p><p><strong>缺点：</strong>还是所有的线程都得等着它（会造成运行速度的变慢）   stop the world</p><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a><strong>ParNew收集器</strong></h3><p>ParNew收集器其实就是Serial收集器的多线程版本。<strong>新生代并行，老年代串行；新生代复制算法、老年代标记-压缩</strong></p><p><strong>参数控制：</strong>-XX:+UseParNewGC  ParNew收集器</p><p>​                  -XX:ParallelGCThreads 限制线程数量 </p><p>​                                      </p><p><strong>优点：</strong>使用的多线程。回收线程从一个变成了多个，把Serial的效率提高了</p><p><strong>缺点**</strong>：**在这个时候只能运行回收线程，所有的非回收线程都被禁用 stop the world</p><h3 id="Parallel收集器"><a href="#Parallel收集器" class="headerlink" title="Parallel收集器"></a><strong>Parallel收集器</strong></h3><p>Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩</p><p>参数控制：-XX:+UseParallelGC  使用Parallel收集器+ 老年代串行</p><p>​                                              <img src="http://www.pianshen.com/images/207/0c7aa3265dd000f50905862c7844d477.png" alt="img"></p><h3 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a><strong>Parallel Old 收集器</strong></h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供</p><p>参数控制： -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行</p><h3 id="Parallel-Scavenge收集器-与Parallel-Old收集器区别："><a href="#Parallel-Scavenge收集器-与Parallel-Old收集器区别：" class="headerlink" title="Parallel Scavenge收集器**与Parallel Old收集器区别：**"></a><strong>Parallel Scavenge收集器**</strong>与<strong><strong>Parallel Old收集器</strong></strong>区别：**</h3><p>(二者一个新生代，一个老年代，区别就是所用算法不一样)</p><p><strong>优点：</strong>回收效率进行了计算</p><p><strong>缺点**</strong>：**在这个时候只能运行回收线程  所有的非回收线程都被禁用    stop the world</p><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a><strong>CMS收集器</strong></h3><p>​    这是垃圾回收器中唯一一个使用标记-清理算法的垃圾回收器。</p><p>​    由于并发的原因，他的垃圾回收停顿时间会比较小，但是相应的牺牲了吞吐量，停顿时间短的好处是能提高用户体验，所以，他被广泛地用于B/S架构中。</p><p>​    CMS垃圾回收器回收垃圾一般分为四步：</p><p>​    初始标记：快速标记GCROOT能够关联到的对象，这个步骤会STW；</p><p>​    并发标记；</p><p>​    重新标记：此过程会STW，为了修正并发标记时，用户线程对标记的变化；</p><p>​    并发清理：清理过程是并发的；</p><p>​                                       <img src="http://www.pianshen.com/images/965/63065c3e6e3718a3377aecd2463364f5.png" alt="img"></p><p> <strong>优点：</strong>并发收集、低停顿</p><p> <strong>缺点：</strong>（1）会产生内存碎片（标记-清理带来的缺点）</p><p>​           （2）牺牲了吞吐量，没有办法处理浮动的垃圾（ 浮动垃圾主要来自于 并发清除阶段 ）</p><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a><strong>G1收集器</strong></h3><p>​       G1是<strong>目前技术发展的最前沿成果之一</strong>，HotSpot开发团队赋予它的<strong>使命</strong>是未来可以替换掉JDK1.5中发布的CMS收集器。与CMS收集器相比G1收集器有以下特点：</p><p>​       <strong>1. 空间整合</strong>，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。</p><p>​       <strong>2. 可预测停顿</strong>，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。</p><p>​      上面提到的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region的集合。</p><p>​                       <img src="http://www.pianshen.com/images/290/82e3479977f514fe3679e26f2362d972.png" alt="img">    </p><p>​       G1的新生代收集跟ParNew类似，当新生代占用达到一定比例的时候，开始出发收集。和CMS类似，G1收集器收集老年代对象  会有短暂停顿。</p><h2 id="收集步骤："><a href="#收集步骤：" class="headerlink" title="收集步骤："></a><strong>收集步骤</strong>：</h2><p>1、<strong>标记阶段</strong>，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)</p><p>2、<strong>Root Region Scanning</strong>，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。</p><p>3、<strong>Concurrent Marking</strong>，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。</p><p>​                      <img src="http://www.pianshen.com/images/596/4cd59d8bf8458eb224be233ffc72f20c.png" alt="img"></p><p>4、<strong>Remark</strong>, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。</p><p>5、<strong>Copy/Clean up</strong>，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。</p><p>​                      <img src="http://www.pianshen.com/images/713/1054be60b7a074418c471aa855fcb3b1.png" alt="img">       </p><p>6、复制/清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。</p><p>​                       <img src="http://www.pianshen.com/images/619/0e6c1cad71ce1491ebb0bb39fce89ab3.png" alt="img"></p><p>本文转载自：<a href="https://blog.csdn.net/Snowing1234_5/article/details/96969366" target="_blank" rel="noopener">https://blog.csdn.net/Snowing1234_5/article/details/96969366</a></p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><ul><li><a href="http://www.pianshen.com/article/2785690101/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">GC 垃圾收集器</a></li><li><a href="http://www.pianshen.com/article/2076793014/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">GC 垃圾收集器</a></li><li><a href="http://www.pianshen.com/article/9553793016/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">GC 垃圾收集器</a></li><li><a href="http://www.pianshen.com/article/1281166860/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">JVM的垃圾回收算法以及GC收集器</a></li><li><a href="http://www.pianshen.com/article/6291304253/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">不同垃圾收集器种类的GC日志</a></li><li><a href="http://www.pianshen.com/article/9996249804/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">GC算法与垃圾收集器</a></li><li><a href="http://www.pianshen.com/article/1801694536/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">GC参数和垃圾收集器</a></li><li><a href="http://www.pianshen.com/article/8582727714/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">JVM几种常见的垃圾收集器总结</a></li><li><a href="http://www.pianshen.com/article/896423848/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">jvm系列(三):GC算法 垃圾收集器</a></li><li><a href="http://www.pianshen.com/article/9841157232/;jsessionid=E0DEA106D16CF43E807CF64BD65B0622" target="_blank" rel="noopener">JVM-GC算法 垃圾收集器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM&amp;GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM&amp;GC（四）JVM内存分配机制和垃圾回收算法</title>
      <link href="/2020/01/15/JVM&amp;GC%EF%BC%88%E5%9B%9B%EF%BC%89JVM%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
      <url>/2020/01/15/JVM&amp;GC%EF%BC%88%E5%9B%9B%EF%BC%89JVM%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6%E5%92%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM内存分配机制和垃圾回收算法"><a href="#JVM内存分配机制和垃圾回收算法" class="headerlink" title="JVM内存分配机制和垃圾回收算法"></a>JVM内存分配机制和垃圾回收算法</h1><h2 id="对象存活判定算法"><a href="#对象存活判定算法" class="headerlink" title="对象存活判定算法"></a>对象存活判定算法</h2><p>在堆里存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，首要的就是确定这些对象中哪些还“存活”着，哪些已经“死去”（即不可能再被任何途径使用的对象）。</p><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>引用计数算法是在JVM中被摒弃的一种对象存活判定算法，不过它也有一些知名的应用场景（如Python、FlashPlayer），因此在这里也简单介绍一下。</p><p>用引用计数器判断对象是否存活的过程是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器加1；当引用失效时，计数器减1；任何时刻计数器为0的对象就是不可能再被使用的。</p><p>引用计数算法的实现简单，判定效率也很高，大部分情况下是一个不错的算法。它没有被JVM采用的原因是它很难解决对象之间循环引用的问题。例如以下例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * testGC()方法执行后，objA和objB会不会被GC呢？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这个成员属性的唯一意义就是占点内存，以便在能在GC日志中看清楚是否有回收过     */</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReferenceCountingGC objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReferenceCountingGC objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>        objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>        objA <span class="token operator">=</span> null<span class="token punctuation">;</span>        objB <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 假设在这行发生GC，objA和objB是否能被回收？   System.gc();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这段代码中，对象objA 和对象objB都有字段instance，赋值令<code>objA.instance = objB;</code>、<code>objB.instance = objA;</code>，除此之外，这两个对象再无引用。如果JVM采用引用计数算法来管理内存，这两个对象不可能再被访问，但是他们互相引用着对方，导致它们引用计数不为0，所以引用计数器无法通知GC收集器回收它们。</p><p>而事实上执行这段代码，objA和objB是可以被回收的，下面一节将介绍JVM实际使用的存活判定算法。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>在主流商用程序语言的实现中，都是通过可达性分析（tracing GC）来判定对象是否存活的。此算法的基本思路是：通过一系列的称为“GC Roots”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是GC Roots 到这个对象不可达）时，则证明此对象时不可用的。用下图来加以说明：</p><p><img src="https://pic4.zhimg.com/80/v2-88e1e790abc52c58232f08c0a5716573_hd.jpg" alt="img"></p><p>上图中，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是可回收的对象。</p><p>可以看到，GC Roots在对象图之外，是特别定义的“起点”，不可能被对象图内的对象所引用。</p><p>准确地说，GC Roots其实不是一组对象，而通常是一组特别管理的指向引用类型对象的指针，这些指针是tracing GC的trace的起点。它们不是对象图里的对象，对象也不可能引用到这些“外部”的指针，这也是tracing GC算法不会出现循环引用问题的基本保证。因此也容易得出，只有引用类型的变量才被认为是Roots，值类型的变量永远不被认为是Roots。只有深刻理解引用类型和值类型的内存分配和管理的不同，才能知道为什么root只能是引用类型。</p><p>在Java中，可作为GC Roots的对象包括以下几种：</p><ul><li>虚拟机栈（栈帧中的局部变量表，Local Variable Table）中引用的对象。</li><li>方法区中<em>类静态属性</em>引用的对象。</li><li>方法区中<em>常量</em>引用的对象。</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li></ul><p>看到这里你可能要问，选择这些对象的依据是什么呢？</p><p>可以概括得出，可作为GC Roots的节点主要在全局性的引用与执行上下文中。要明确的是，tracing gc必须以当前存活的对象集为Roots，因此必须选取确定存活的引用类型对象。GC管理的区域是Java堆，虚拟机栈、方法区和本地方法栈不被GC所管理，因此选用这些区域内引用的对象作为GC Roots，是不会被GC所回收的。其中虚拟机栈和本地方法栈都是线程私有的内存区域，只要线程没有终止，就能确保它们中引用的对象的存活。而方法区中类静态属性引用的对象是显然存活的。常量引用的对象在当前可能存活，因此，也可能是GC roots的一部分。</p><h3 id="两次标记与-finalize-方法"><a href="#两次标记与-finalize-方法" class="headerlink" title="两次标记与 finalize()方法"></a>两次标记与 finalize()方法</h3><p>即使在可达性分析算法中不可达的对象，也不是一定会死亡的，它们暂时都处于“缓刑”阶段，要真正宣告一个对象“死亡”，至少要经历两次标记过程：</p><p>如果对象在进行可达性分析后发现没有与 GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行<code>finaliza()</code>方法。当对象没有覆盖<code>finaliza()</code>方法，或者<code>finaliza()</code>方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定为有必要执行<code>finaliza()</code>方法，那么此对象将会放置在一个叫做 F-Queue 的队列中，并在稍后由一个虚拟机自动建立的、低优先级的Finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发此方法，但并不承诺会等待它运行结束，原因是：如果一个对象在<code>finaliza()</code>方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能导致F-Queue 队列中的其它对象永久处于等待，甚至导致整个内存回收系统崩溃。</p><p><code>finaliza()</code>方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue 队列中的对象进行第二次小规模的标记。如果对象想在<code>finaliza()</code>方法中成功拯救自己，只要重新与引用链上的任何一个对象建立关联即可，例如把自己（this关键字）赋值给某个类变量或者对象的成员变量，这样在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，基本上它就真的被回收了。</p><p>值得注意的是，如果代码中有两段一模一样的代码段，执行结果却是一次逃脱成功，一次失败。这是因为任何一个对象的<code>finalize()</code>方法都只会被系统调用一次，如果对象面临下一次回收，它的<code>finalize()</code>方法不会再被执行，因此第二次逃脱行动失败。</p><p>需要说明的是，使用<code>finalize()</code>方法来“拯救”对象是不值得提倡的，因为它不是C/C++中的析构函数，而是Java刚诞生时为了使C/C++程序员更容易接受它所做的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。<code>finalize()</code> 能做的工作，使用<code>try-finally</code>或者其它方法都更适合、及时，所以笔者建议大家可以忘掉此方法存在。</p><h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><p>很多人认为方法区没有垃圾回收，Java虚拟机规范中确实说过不要求，而且在方法区中进行垃圾收集的“性价比”较低：在堆中，尤其是新生代，常规应用进行一次垃圾收集可以回收70%~95%的空间，而方法区的效率远低于此。在JDK 1.8中，JVM摒弃了永久代，用元空间来作为方法区的实现，下面介绍的将是元空间的垃圾回收。</p><p>元空间的内存管理由元空间虚拟机来完成。先前，对于类的元数据我们需要不同的垃圾回收器进行处理，现在只需要执行元空间虚拟机的C++代码即可完成。在元空间中，类和其元数据的生命周期和其对应的类加载器是相同的。话句话说，只要类加载器存活，其加载的类的元数据也是存活的，因而不会被回收掉。</p><p>我们从行文到现在提到的元空间稍微有点不严谨。准确的来说，每一个<em>类加载器的存储区域</em>都称作一个元空间，所有的元空间合在一起就是我们一直说的元空间。当一个类加载器被垃圾回收器标记为不再存活，其对应的元空间会被回收。在元空间的回收过程中没有重定位和压缩等操作。但是元空间内的元数据会进行扫描来确定Java引用。</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>本节将介绍几种垃圾收集算法的思想及其发展过程，具体的实现将在稍后介绍。</p><h3 id="标记－清除（Mark-Sweep）算法"><a href="#标记－清除（Mark-Sweep）算法" class="headerlink" title="标记－清除（Mark-Sweep）算法"></a>标记－清除（Mark-Sweep）算法</h3><p>标记－清除（Mark-Sweep）算法是最基础的垃圾收集算法，后续的收集算法都是基于它的思路并对其不足进行改进而得到的。顾名思义，算法分成“标记”、“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象，标记过程在前一节讲述对象标记判定时已经讲过了。</p><p>标记－清除算法的不足主要有以下两点：</p><ul><li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不触发另一次垃圾收集动作。</li><li>效率问题，因为内存碎片的存在，操作会变得更加费时，因为查找下一个可用空闲块已不再是一个简单操作。</li></ul><p>标记－清除算法的执行过程如下图所示：</p><p><img src="https://pic3.zhimg.com/80/v2-246b7d7b7ce9da2e2ea19501207b561a_hd.jpg" alt="img"></p><h3 id="复制（Copying）算法"><a href="#复制（Copying）算法" class="headerlink" title="复制（Copying）算法"></a>复制（Copying）算法</h3><p>为了解决标记-清除算法的效率问题，一种称为“复制”（Copying）的收集算法出现了，思想为：它将可用内存按容量分成大小相等的两块，每次只使用其中的一块。当这一块内存用完，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存空间一次清理掉。</p><p>这样做使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，代价可能过高了。复制算法的执行过程如下图所示：</p><p><img src="https://pic1.zhimg.com/80/v2-48aea7d502b46b09120c90448da652b8_hd.jpg" alt="img"></p><p>Minor GC与复制算法</p><p>现在的商业虚拟机都使用复制算法来回收新生代。新生代的GC又叫“Minor GC”，IBM公司的专门研究表明：新生代中的对象98%是“朝生夕死”的，所以Minor GC非常频繁，一般回收速度也比较快，同时“朝生夕死”的特性也使得Minor GC使用复制算法时不需要按照1:1的比例来划分新生代内存空间。</p><p>Minor GC过程</p><p>事实上，新生代将内存分为一块较大的Eden空间和两块较小的Survivor空间（From Survivor和To Survivor），每次Minor GC都使用Eden和From Survivor，当回收时，将Eden和From Survivor中还存活着的对象都一次性地复制到另外一块To Survivor空间上，最后清理掉Eden和刚使用的Survivor空间。一次Minor GC结束的时候，Eden空间和From Survivor空间都是空的，而To Survivor空间里面存储着存活的对象。在下次MinorGC的时候，两个Survivor空间交换他们的标签，现在是空的“From” Survivor标记成为“To”，“To” Survivor标记为“From”。因此，在MinorGC结束的时候，Eden空间是空的，两个Survivor空间中的一个是空的，而另一个存储着存活的对象。</p><p>HotSpot虚拟机默认的Eden : Survivor的比例是8 : 1，由于一共有两块Survivor，所以每次新生代中可用内存空间为整个新生代容量的90%（80%＋10%），只有10%的容量会被“浪费”。</p><p>分配担保</p><p>上文说的98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖老年代内存进行分配担保（Handle Promotion）。如果另外一块Survivor上没有足够空间存放上一次新生代收集下来的存活对象，这些对象将直接通过分配担保机制进入老年代。</p><h3 id="标记－整理（Mark-Compact）算法"><a href="#标记－整理（Mark-Compact）算法" class="headerlink" title="标记－整理（Mark-Compact）算法"></a>标记－整理（Mark-Compact）算法</h3><p>复制算法在对象存活率较高时要进行较多的复制操作，效率将会变低。更关键的是：如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用复制算法。</p><p>根据老年代的特点，标记－整理（Mark-Compact）算法被提出来，主要思想为：此算法的标记过程与标记－清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。具体示意图如下所示：</p><p><img src="https://pic2.zhimg.com/80/v2-eabb0ab735f8c73650abbd233850d259_hd.jpg" alt="img"></p><h3 id="分代收集（Generational-Collection）算法"><a href="#分代收集（Generational-Collection）算法" class="headerlink" title="分代收集（Generational Collection）算法"></a>分代收集（Generational Collection）算法</h3><p>当前商业虚拟机的垃圾收集都采用分代收集（Generational Collection）算法，此算法相较于前几种没有什么新的特征，主要思想为：根据对象存活周期的不同将内存划分为几块，一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适合的收集算法：</p><ul><li>新生代 在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。</li><li>老年代 在老年代中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。</li></ul><h2 id="HotSpot的算法实现"><a href="#HotSpot的算法实现" class="headerlink" title="HotSpot的算法实现"></a>HotSpot的算法实现</h2><p>前面两大节主要从理论上介绍了对象存活判定算法和垃圾收集算法，而在HotSpot虚拟机上实现这些算法时，必须对算法的执行效率有严格的考量，才能保证虚拟机高效运行。</p><h3 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h3><p>从可达性分析中从GC Roots节点找引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的局部变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的引用，那么必然会消耗很多时间。</p><p>GC停顿（”Stop The World”）</p><p>另外，可达性分析工作必须在一个能确保一致性的快照中进行——这里“一致性”的意思是指在整个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，这是保证分析结果准确性的基础。这点是导致GC进行时必须停顿所有Java执行线程（Sun将这件事情称为“Stop The World”）的其中一个重要原因，即使是在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</p><p>准确式GC与OopMap</p><p>由于目前的主流Java虚拟机使用的都是准确式GC（即使用准确式内存管理，虚拟机可用知道内存中某个位置的数据具体是什么类型），所以当执行系统停顿下来后，并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组称为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。这样，GC在扫描时就可以直接得知这些信息了。</p><h3 id="安全点（Safepoint）——进行GC时程序停顿的位置"><a href="#安全点（Safepoint）——进行GC时程序停顿的位置" class="headerlink" title="安全点（Safepoint）——进行GC时程序停顿的位置"></a>安全点（Safepoint）——进行GC时程序停顿的位置</h3><p>在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举，但一个很现实的问题随之而来：可能导致引用关系变化，或者说OopMap内容变化的指令非常多，如果为每一条指令都生成对应的OopMap，那将会需要大量的额外空间，这样GC的空间成本将会变得很高。</p><p>为此，HotSpot选择不为每条指令都生成OopMap，而是只在“特定的位置”记录这些信息，这些位置便被称为安全点（Safepoint）。也就是说，程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。Safepoint的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。</p><p>对于Sefepoint，另一个需要考虑的问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。这里有两种方案可供选择：</p><ul><li>抢先式中断（Preemptive Suspension） 抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。</li><li>主动式中断（Voluntary Suspension）： 主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</li></ul><h3 id="安全区域（Safe-Region）"><a href="#安全区域（Safe-Region）" class="headerlink" title="安全区域（Safe Region）"></a>安全区域（Safe Region）</h3><p>Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候（如线程处于Sleep状态或Blocked状态），这时线程无法响应JVM的中断请求，“走到”安全的地方去中断挂起，这时候就需要安全区域（Safe Region）来解决。</p><p>安全区域是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。我们也可以把Safe Region看做是被扩展了的Safepoint。</p><p>在线程执行到Safe Region中的代码时，首先标识自己已经进入了Safe Region，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为Safe Region状态的线程了。在线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举（或者是整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以安全离开Safe Region的信号为止。</p><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><blockquote><p>Java的自动内存管理最终可以归结为自动化地解决了两个问题：</p><ul><li>给对象分配内存</li><li>回收分配给对象的内存</li></ul><p>对象的内存分配通常是在堆上分配（除此以外还有可能经过JIT编译后被拆散为标量类型并间接地栈上分配），对象主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是固定的，实际取决于垃圾收集器的具体组合以及虚拟机中与内存相关的参数的设置。至于内存回收策略，在上文已经描述得很详尽了。</p><p>下面以使用Serial/Serial Old收集器（将在下一篇文章中讲解）为例，介绍内存分配的策略。</p></blockquote><h3 id="对象优先在Eden区分配"><a href="#对象优先在Eden区分配" class="headerlink" title="对象优先在Eden区分配"></a>对象优先在Eden区分配</h3><p>大多数情况下，对象在新生代的Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</p><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是很长的字符串以及数组。大对象对虚拟机的内存分配来说是一个坏消息（尤其是遇到朝生夕灭的“短命大对象”，写程序时应避免），经常出现大对象容易导致内存还有不少空间时就提前触发GC以获取足够的连续空间来安置它们。</p><p>虚拟机提供了一个-XX:PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配。这样做的目的是<code>避免在Eden区及两个Survivor区之间发生大量的内存复制</code>（新生代采用复制算法回收内存）。</p><h3 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h3><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX:MaxTenuringThreshold设置。</p><h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>为了能更好地适应不同程序的内存状况，虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在<code>Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半</code>，<code>年龄大于或等于该年龄</code>的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</p><h3 id="老年代空间分配担保"><a href="#老年代空间分配担保" class="headerlink" title="老年代空间分配担保"></a>老年代空间分配担保</h3><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。</p><p>前面提到过，新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。与生活中的贷款担保类似，老年代要进行这样的担保，前提是老年代本身还有容纳这些对象的剩余空间，一共有多少对象会活下来在实际完成内存回收之前是无法明确知道的，所以只好取之前每一次回收晋升到老年代对象容量的平均大小值作为经验值，与老年代的剩余空间进行比较，决定是否进行Full GC来让老年代腾出更多空间。</p><p>取平均值进行比较其实仍然是一种动态概率的手段，也就是说，如果某次Minor GC存活后的对象突增，远远高于平均值的话，依然会导致担保失败（Handle Promotion Failure）。如果出现了HandlePromotionFailure失败，那就只好在失败后重新发起一次Full GC。虽然担保失败时绕的圈子是最大的，但大部分情况下都还是会将HandlePromotionFailure开关打开，避免Full GC过于频繁。</p><h2 id="Full-GC的触发条件"><a href="#Full-GC的触发条件" class="headerlink" title="Full GC的触发条件"></a>Full GC的触发条件</h2><blockquote><p>对于Minor GC，其触发条件非常简单，当Eden区空间满时，就将触发一次Minor GC。而Full GC则相对复杂，有以下几种触发条件。</p></blockquote><h3 id="调用System-gc"><a href="#调用System-gc" class="headerlink" title="调用System.gc()"></a>调用System.gc()</h3><p>此方法的调用是建议JVM进行Full GC,虽然只是建议而非一定,但很多情况下它会触发 Full GC,从而增加Full GC的频率,也即增加了间歇性停顿的次数。因此强烈建议能不使用此方法就不要使用，让虚拟机自己去管理它的内存，可通过-XX:+ DisableExplicitGC来禁止RMI调用System.gc()。</p><h3 id="老年代空间不足"><a href="#老年代空间不足" class="headerlink" title="老年代空间不足"></a>老年代空间不足</h3><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等，当执行Full GC后空间仍然不足，则抛出如下错误： <code>Java.lang.OutOfMemoryError: Java heap space</code>为避免以上两种状况引起的Full GC，调优时应尽量做到让对象在Minor GC阶段被回收、让对象在新生代多存活一段时间及不要创建过大的对象及数组。</p><h3 id="空间分配担保失败"><a href="#空间分配担保失败" class="headerlink" title="空间分配担保失败"></a>空间分配担保失败</h3><p>前文介绍过，使用复制算法的Minor GC需要老年代的内存空间作担保，如果出现了HandlePromotionFailure担保失败，则会触发Full GC。</p><h3 id="JDK-1-7及以前的永久代空间不足"><a href="#JDK-1-7及以前的永久代空间不足" class="headerlink" title="JDK 1.7及以前的永久代空间不足"></a>JDK 1.7及以前的永久代空间不足</h3><p>在JDK 1.7及以前，HotSpot虚拟机中的方法区是用永久代实现的，永久代中存放的为一些class的信息、常量、静态变量等数据，当系统中要加载的类、反射的类和调用的方法较多时，Permanet Generation可能会被占满，在未配置为采用CMS GC的情况下也会执行Full GC。如果经过Full GC仍然回收不了，那么JVM会抛出如下错误信息： <code>java.lang.OutOfMemoryError: PermGen space</code>为避免PermGen占满造成Full GC现象，可采用的方法为增大PermGen空间或转为使用CMS GC。</p><p>在JDK 1.8中用元空间替换了永久代作为方法区的实现，元空间是本地内存，因此减少了一种Full GC触发的可能性。</p><h3 id="Concurrent-Mode-Failure"><a href="#Concurrent-Mode-Failure" class="headerlink" title="Concurrent Mode Failure"></a>Concurrent Mode Failure</h3><p>执行CMS GC的过程中同时有对象要放入老年代，而此时老年代空间不足（有时候“空间不足”是CMS GC时当前的浮动垃圾过多导致暂时性的空间不足触发Full GC），便会报<code>Concurrent Mode Failure</code>错误，并触发Full GC。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM&amp;GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM&amp;GC（三）GC基础</title>
      <link href="/2020/01/15/JVM&amp;GC%EF%BC%88%E4%B8%89%EF%BC%89GC%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/01/15/JVM&amp;GC%EF%BC%88%E4%B8%89%EF%BC%89GC%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="GC基础"><a href="#GC基础" class="headerlink" title="GC基础"></a>GC基础</h2><h3 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1.基础概念"></a>1.基础概念</h3><ul><li><strong>年轻代</strong></li></ul><p>JVM堆中一片区域，用于存放对象用，内部分为<code>EDEN</code>，<code>SURVIVOR</code>(包含FROM和TO两份)区域，比例是8:2(FROM，TO各占1)（<code>jvisualvm</code>JDK自带JVM调优小工具<code>Visual GC插件</code>）</p><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/1581043430316.png" alt="1581043430316"></p><ul><li><strong>老年代</strong></li></ul><p>JVM堆中一片区域，用于存放对象用，用于存放生命周期较长或者空间较大的对象(G1中有专门的大对象区间)</p><ul><li><strong>永久代</strong></li></ul><p>JDK8已经移除，之前是JVM规范中方法区的实现</p><ul><li><p><strong>GC ROOT</strong></p><p>一个指针(引用)，它保存了堆里面的对象(指向)，而自己又不存储在堆中，那么它就可以是一个ROOT，可以作为GC Roots的节点主要是全局性的引用(如常量或者静态属性引用的对象)与执行上下文(栈帧中的局部变量表)以及JNI本地方法栈中引用的对象</p></li><li><p><strong>对象提升规则</strong></p></li></ul><p>虚拟机给每个对象定义了一个年龄计数器，对象每经过一次年轻代的垃圾回收然后存活下来就会加1，当达到一定年龄后(默认是15)会将对象提升放入到老年代中</p><ul><li><strong>Minor GC</strong></li></ul><p>年轻代的回收称之为Minor GC，年轻代的回收频率特别频繁，大多数对象都是在年轻代中创建并回收的</p><ul><li><strong>MajorGC/Full GC</strong></li></ul><p>年老代(老年代)的内存区域一般大于年轻代，所以年老代发生GC的频率会必年轻代少，对象从年老代消失的时候我们称为MajorGc或者Full GC，Full GC会占用大量时间导致程序一段时间内无响应</p><ul><li><strong>Object Header(对象头)</strong></li></ul><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/1581043307994.png" alt="1581043307994"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM&amp;GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freemarker语法</title>
      <link href="/2020/01/15/Freemarker%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/01/15/Freemarker%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h4 id="1、字符输出"><a href="#1、字符输出" class="headerlink" title="1、字符输出"></a>1、字符输出</h4><pre class="line-numbers language-ftl"><code class="language-ftl">${emp.name?if_exists}　　　　　  　// 变量存在，输出该变量，否则不输出${emp.name!}　　　　　　　　　　    // 变量存在，输出该变量，否则不输出${emp.name?default("xxx")}        // 变量不存在，取默认值xxx  ${emp.name!"xxx"}    　　　　　　  // 变量不存在，取默认值xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用内部函数：</p><pre class="line-numbers language-ftl"><code class="language-ftl">${"123<br>456"?html}    　　// 对字符串进行HTML编码，对html中特殊字符进行转义    ${"str"?cap_first}    　　  // 使字符串第一个字母大写     ${"Str"?lower_case}        // 将字符串转换成小写     ${"Str"?upper_case}        // 将字符串转换成大写    ${"str"?trim}              // 去掉字符串前后的空白字符   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串的两种拼接方式拼接：</p><pre class="line-numbers language-ftl"><code class="language-ftl">${ “你好${emp.name！}”} //输出你好+变量名  ${“hello”+ emp.name！} //使用+号来连接，输出你好+变量名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以通过如下语法来截取子串：</p><pre class="line-numbers language-ftl"><code class="language-ftl"><#assign str =“abcdefghijklmn”/>//方法1${str?substring（0,4）} //输出abcd//方法2 ${ str [ 0 ] } ${str [4]} //结果是ae${str [1..4]} //结果是bcde//返回指定字符的索引${str?index_of（"n"）}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2，日期输出"><a href="#2，日期输出" class="headerlink" title="2，日期输出"></a>2，日期输出</h4><pre class="line-numbers language-ftl"><code class="language-ftl">${emp.date?string（'yyyy -MM-dd'）} //日期格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3，数字输出（以数字20为例）"><a href="#3，数字输出（以数字20为例）" class="headerlink" title="3，数字输出（以数字20为例）"></a>3，数字输出（以数字20为例）</h4><pre class="line-numbers language-ftl"><code class="language-ftl">${emp.name?string.number} //输出20  ${emp.name?string.currency} //¥20.00  ${emp.name?string.percent} // 20％  ${1.222？int} //将小数转为int，输出1  <#setting number_format =“percent”/> //设置数字默认输出方式（'percent'，百分比） <#assign answer = 42 /> //声明变量回答42  #{answer} //输出4,200％${answer？string} //输出4,200％${answer？string.number} //输出42${answer？string.currency} //输出¥42.00 ${answer？string.percent} //输出4,200％#{answer} //输出42 数字格式化插值可采用＃{expr; format}形式来格式化数字，其中格式可以是：mX：小数部分最小X位MX：小数部分最大X位如下面的例子：<#assign x = 2.582 /> <#assign y = 4 /> ＃ {x; M2} //输出2.58 ＃ {y; M2} //输出4 ＃ {x; m2} //输出2.58 ＃{Y; m2} //输出4.0＃ {x; m1M2} //输出2.58 ＃ {x; m1M2} //输出4.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4，申明变量"><a href="#4，申明变量" class="headerlink" title="4，申明变量"></a>4，申明变量</h4><pre class="line-numbers language-ftl"><code class="language-ftl"><#assign foo = false /> //声明变量，插入布尔值进行显示，注意不要用引号${foo？string（“yes”，“no”）} //当为真时输出“yes”，否则输出“no”   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>申明变量的几种方式</p><pre class="line-numbers language-ftl"><code class="language-ftl"><#assign name = value> <#assign name1 = value1 name2 = value2 ... nameN = valueN> <#assign same as above... in namespacehash> <#assign name> capture this </＃assign> <#assign name in namespacehash> capture this </＃assign> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5，比运算算符"><a href="#5，比运算算符" class="headerlink" title="5，比运算算符"></a>5，比运算算符</h4><pre class="line-numbers language-ftl"><code class="language-ftl">表达式中支持的比较运算符符如下几个：=或==：判断两个值是否相等。！=：判断两个值是否不等。>或gt：判断左边值是否大于右边值><=或lte：判断左边值是否小于等于右边值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6，算术运算符"><a href="#6，算术运算符" class="headerlink" title="6，算术运算符"></a>6，算术运算符</h4><pre class="line-numbers language-ftl"><code class="language-ftl">FreeMarker表达式中完全支持算术运算，FreeMarker支持的算术运算符包括：+， - ，*，/，％注意：（1）运算符两边必须是数字（2）使用+运算符时，如果一边是数字，一边是字符串，就会自动将数字转换为字符串再连接，     如：${3 +“5”}，结果是：35 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7，逻辑运算符"><a href="#7，逻辑运算符" class="headerlink" title="7，逻辑运算符"></a>7，逻辑运算符</h4><pre class="line-numbers language-ftl"><code class="language-ftl">逻辑运算符有如下几个：逻辑与：&& 逻辑或：|| 逻辑非：！逻辑运算符只能作用于布尔值，否则将产生错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8，FreeMarker中的运算符优先级如下（由高到低排列）"><a href="#8，FreeMarker中的运算符优先级如下（由高到低排列）" class="headerlink" title="8，FreeMarker中的运算符优先级如下（由高到低排列）"></a>8，FreeMarker中的运算符优先级如下（由高到低排列）</h4><pre class="line-numbers language-ftl"><code class="language-ftl">①，一元运算符：！②，内建函数：③，乘除法：*，/，％④，加减法： - ，+ ⑤，比较：>，<，> =，<=（lt，lte，gt，gte）⑥，相等：==，=， ！= ⑦，逻辑与：&& ⑧，逻辑或：|| ⑨，数字范围：.. 实际上，我们在开发过程中应该使用括号来严格区分，这样的可读性好，出错少<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9，if逻辑判断（注意：elseif不加空格）"><a href="#9，if逻辑判断（注意：elseif不加空格）" class="headerlink" title="9，if逻辑判断（注意：elseif不加空格）"></a>9，if逻辑判断（注意：elseif不加空格）</h4><pre class="line-numbers language-ftl"><code class="language-ftl"><#if condition>...<#elseif condition2>...<#elseif condition3>...<#else>...</#if>if 空值判断// 当 photoList 不为空时<#if photoList??>...</#if> 值得注意的是,${..}只能用于文本部分,不能用于表达式,下面的代码是错误的:<#if ${isBig}>Wow!</#if><#if "${isBig}">Wow!</#if>// 正确写法<#if isBig>Wow!</#if> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10、switch-条件可为数字，可为字符串"><a href="#10、switch-条件可为数字，可为字符串" class="headerlink" title="10、switch (条件可为数字，可为字符串)"></a>10、switch (条件可为数字，可为字符串)</h4><pre class="line-numbers language-ftl"><code class="language-ftl"><#switch value> <#case refValue1> ....<#break> <#case refValue2> ....<#break> <#case refValueN> ....<#break> <#default> .... </#switch><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11、集合-amp-循环"><a href="#11、集合-amp-循环" class="headerlink" title="11、集合 &amp; 循环"></a>11、集合 &amp; 循环</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// 遍历集合:<#list empList! as emp>     ${emp.name!}</#list>// 可以这样遍历集合:<#list 0..(empList!?size-1) as i>    ${empList[i].name!}</#list>// 与jstl循环类似,也可以访问循环的状态。empList?size 　　　// 取集合的长度emp_index: 　　　　// int类型，当前对象的索引值 emp_has_next:     // boolean类型，是否存在下一个对象// 使用<#break>跳出循环<#if emp_index = 0><#break></#if>// 集合长度判断 <#if empList?size != 0></#if> // 判断=的时候,注意只要一个=符号,而不是==<#assign l=0..100/>    // 定义一个int区间的0~100的集合，数字范围也支持反递增,如100..2<#list 0..100 as i> 　　// 等效于java for(int i=0; i <= 100; i++)　　${i}</#list>// 截取子集合：empList[3..5] //返回empList集合的子集合,子集合中的元素是empList集合中的第4-6个元素// 创建集合：<#list ["星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期天"] as x>// 集合连接运算,将两个集合连接成一个新的集合<#list ["星期一","星期二","星期三"] + ["星期四","星期五","星期六","星期天"] as x>// 除此之外,集合元素也可以是表达式,例子如下:[2 + 2, [1, 2, 3, 4], "whatnot"]// seq_contains：判断序列中的元素是否存在<#assign x = ["red", 16, "blue", "cyan"]> ${x?seq_contains("blue")?string("yes", "no")}    // yes${x?seq_contains("yellow")?string("yes", "no")}  // no${x?seq_contains(16)?string("yes", "no")}        // yes${x?seq_contains("16")?string("yes", "no")}      // no// seq_index_of：第一次出现的索引<#assign x = ["red", 16, "blue", "cyan", "blue"]> ${x?seq_index_of("blue")}  // 2// sort_by：排序（升序）<#list movies?sort_by("showtime") as movie></#list>// sort_by：排序（降序）<#list movies?sort_by("showtime")?reverse as movie></#list>// 具体介绍：// 不排序的情况：<#list movies as moive>　　<a href="${moive.url}">${moive.name}</a></#list>//要是排序，则用<#list movies?sort as movie>　　<a href="${movie.url}">${movie.name}</a></#list>// 这是按元素的首字母排序。若要按list中对象元素的某一属性排序的话，则用<#list moives?sort_by(["name"]) as movie>　　<a href="${movie.url}">${movie.name}</a></#list>//这个是按list中对象元素的[name]属性排序的，是升序，如果需要降序的话，如下所示：<#list movies?sort_by(["name"])?reverse as movie>　　<a href="${movie.url}">${movie.name}</a></#list><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12、Map对象"><a href="#12、Map对象" class="headerlink" title="12、Map对象"></a>12、Map对象</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// 创建map<#assign scores = {"语文":86,"数学":78}>// Map连接运算符<#assign scores = {"语文":86,"数学":78} + {"数学":87,"Java":93}>// Map元素输出emp.name       // 全部使用点语法emp["name"]    // 使用方括号循环//遍历集合：<＃list empList！as emp>     ${emp.name！}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13、FreeMarker支持如下转义字符"><a href="#13、FreeMarker支持如下转义字符" class="headerlink" title="13、FreeMarker支持如下转义字符:"></a>13、FreeMarker支持如下转义字符:</h4><pre class="line-numbers language-ftl"><code class="language-ftl">\" ：双引号(u0022)\' ：单引号(u0027)\\ ：反斜杠(u005C)\n ：换行(u000A)\r ：回车(u000D)\t ：Tab(u0009)\b ：退格键(u0008)\f ：Form feed(u000C)\l ：<\g ：>\a ：&\{ ：{\xCode ：直接通过4位的16进制数来指定Unicode码,输出该unicode码对应的字符.如果某段文本中包含大量的特殊符号,FreeMarker提供了另一种特殊格式:可以在指定字符串内容的引号前增加r标记,在r标记后的文件将会直接输出.看如下代码:${r"${foo}"} // 输出 ${foo}${r"C:/foo/bar"} // 输出 C:/foo/bar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14、include指令"><a href="#14、include指令" class="headerlink" title="14、include指令"></a>14、include指令</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// include指令的作用类似于JSP的包含指令:<#include "/test.ftl" encoding="UTF-8" parse=true>// 在上面的语法格式中,两个参数的解释如下:encoding="GBK"  // 编码格式parse=true 　　 // 是否作为ftl语法解析,默认是true，false就是以文本方式引入注意:在ftl文件里布尔值都是直接赋值的如parse=true,而不是parse="true"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15、import指令"><a href="#15、import指令" class="headerlink" title="15、import指令"></a>15、import指令</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// 类似于jsp里的import,它导入文件，然后就可以在当前文件里使用被导入文件里的宏组件<#import "/libs/mylib.ftl" as my>// 上面的代码将导入/lib/common.ftl模板文件中的所有变量,交将这些变量放置在一个名为com的Map对象中，"my"在freemarker里被称作namespace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="16、compress-压缩"><a href="#16、compress-压缩" class="headerlink" title="16、compress 压缩"></a>16、compress 压缩</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// 用来压缩空白空间和空白的行 <#compress>     ... </#compress><#t> // 去掉左右空白和回车换行 <#lt>// 去掉左边空白和回车换行 <#rt>// 去掉右边空白和回车换行 <#nt>// 取消上面的效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="17、escape-noescape-对字符串进行HTML编码"><a href="#17、escape-noescape-对字符串进行HTML编码" class="headerlink" title="17、escape,noescape 对字符串进行HTML编码"></a>17、escape,noescape 对字符串进行HTML编码</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// escape指令导致body区的插值都会被自动加上escape表达式,但不会影响字符串内的插值,    只会影响到body内出现的插值,使用escape指令的语法格式如下:<#escape x as x?html> 　　First name: ${firstName} <#noescape>Last name: ${lastName}</#noescape> 　　Maiden name: ${maidenName} </#escape>// 相同表达式First name: ${firstName?html} Last name: ${lastName} Maiden name: ${maidenName?html}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2><h4 id="1、global全局赋值语法"><a href="#1、global全局赋值语法" class="headerlink" title="1、global全局赋值语法"></a>1、global全局赋值语法</h4><pre class="line-numbers language-ftl"><code class="language-ftl"><#global name=value> <#global name1=value1 name2=value2 ... nameN=valueN> <#global name> 　　capture this </#global>// 利用这个语法给变量赋值，那么这个变量在所有的namespace中是可见的，    如果这个变量被当前的assign语法覆盖如<#global x=2><#assign x=1>    在当前页面里x=2将被隐藏，或者通过${.globals.x} 来访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、setting-语法"><a href="#2、setting-语法" class="headerlink" title="2、setting 语法"></a>2、setting 语法</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// 用来设置整个系统的一个环境 locale // zh_CN 中文环境number_format boolean_format date_format , time_format , datetime_format time_zone classic_compatible// 例1：<#setting number_format="percent"/>    // 设置数字默认输出方式('percent',百分比)// 例2：// 假如当前是匈牙利的设置，然后修改成美国${1.2} // 输出1,2<#setting locale="en_US"> ${1.2} // 输出1.2,因为匈牙利是采用", "作为十进制的分隔符，美国是用". "<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、macro宏指令"><a href="#3、macro宏指令" class="headerlink" title="3、macro宏指令"></a>3、macro宏指令</h4><p>例子1：</p><pre class="line-numbers language-ftl"><code class="language-ftl"><#-- 定义宏 --><#macro test foo bar="Bar" baaz=-1> 　　Text: ${foo}, ${bar}, ${baaz}</#macro><#-- 使用宏 --><@test foo="a" bar="b" baaz=5*5/>  // 输出：Text: a, b, 25<@test foo="a" bar="b"/>    　　　　// 输出：Text: a, b, -1<@test foo="a" baaz=5*5-2/> 　　　　// 输出：Text: a, Bar, 23<@test foo="a"/>                   // 输出：Text: a, Bar, -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子2：</p><pre class="line-numbers language-ftl"><code class="language-ftl"><#-- 定义一个循环输出的宏 --><#macro list title items> 　　${title}　　<#list items as x>　　　　*${x}　　</#list> </#macro> <#-- 使用宏 --><@list items=["mouse", "elephant", "python"] title="Animals"/>// 输出Animals *mouse *elephant *python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子3：</p><pre class="line-numbers language-ftl"><code class="language-ftl"><#-- 嵌套宏 --><#macro border>　　<table>　　　　<#nested>　　</table></#macro><#-- 嵌套宏使用 --><@border>　　<tr><td>hahaha</td></tr></@border> 输出结果：<table>　　<tr><td>hahaha</td></tr></table><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子4：在nested指令中使用循环变量时,可以使用多个循环变量,看如下代码</p><pre class="line-numbers language-ftl"><code class="language-ftl"><#-- 循环嵌套宏 --><#macro repeat count>　　<#list 1..count as x>　　　　<#nested x, x/2, x==count> // 使用nested指令时指定了三个循环变量　　</#list></#macro><#-- 使用宏 --><@repeat count = 4; c, halfc, last>　　${c}. ${halfc}<#if last> Last!</#if></@repeat>// 输出结果：// 1. 0.5// 2. 1// 3. 1.5// 4. 2 Last!freemarker 宏嵌套nested 的使用:http://blog.sina.com.cn/s/blog_7e5699790100z59g.html  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、结束macro指令"><a href="#4、结束macro指令" class="headerlink" title="4、结束macro指令"></a>4、结束macro指令</h4><pre class="line-numbers language-ftl"><code class="language-ftl">// return指令用于结束macro指令<#-- 创建宏 --><#macro book>　　spring　　<#return>　　j2ee</#macro><#-- 使用宏 --><@book />// 上面的代码输出:spring,而j2ee位于return指令之后,不会输出.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 模板引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM&amp;GC（二）JVM的组成</title>
      <link href="/2020/01/04/JVM&amp;GC%EF%BC%88%E4%BA%8C%EF%BC%89JVM%E7%9A%84%E7%BB%84%E6%88%90/"/>
      <url>/2020/01/04/JVM&amp;GC%EF%BC%88%E4%BA%8C%EF%BC%89JVM%E7%9A%84%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h2><h4 id="1、JVM的主要组成部分"><a href="#1、JVM的主要组成部分" class="headerlink" title="1、JVM的主要组成部分"></a>1、JVM的主要组成部分</h4><ol><li>类加载器(ClassLoader)</li><li>运行时数据区(Runtime Data Area)</li><li>执行引擎(Execution Engine)</li><li>本地库接口(Native Interface)</li></ol><blockquote><p>程序在执行之前先要把java代码转换成字节码(class文件)，jvm首先需要把字节码通过<code>类加载器</code>(ClassLoader) 把文件加载到内存中<code>运行时数据区</code>(Runtime Data Area)，而字节码文件是jvm的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器<code>执行引擎</code>(Execution Engine) 将字节码翻译成底层系统指令再交由CPU去执行，而这个过程中需要调用其他语言的接口<code>本地库接口</code>(Native Interface)来实现整个程序的功能，这就是这4个主要组成部分的职责与功能。<br>而我们通常所说的jvm组成指的是运行时数据区(Runtime Data Area) ，因为通常需要程序员调试分析的区域就是”运行时数据区”，或者更具体的来说就是”运行时数据区”里面的Heap（堆）模块，那接下来我们来看运行时数据区(Runtime Data Area)是由哪些模块组成的。</p></blockquote><h4 id="2、JVM的运行时数据区"><a href="#2、JVM的运行时数据区" class="headerlink" title="2、JVM的运行时数据区"></a>2、JVM的运行时数据区</h4><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/1581043520742.png" alt="1581043520742"></p><blockquote><p>不同虚拟机实现可能略微有所不同，但都会遵从Java虚拟机规范，Java 8虚拟机规范规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域：</p></blockquote><ol><li>程序计数器(Program Counter Register)</li><li>Java虚拟机栈(Java Virtual Machine Stacks)</li><li>本地方法栈(Native Method Stack)</li><li>Java堆(Java Heap)</li><li>方法区（Methed Area)</li></ol><h5 id="2-2-1程序计数器"><a href="#2-2-1程序计数器" class="headerlink" title="2.2.1程序计数器"></a>2.2.1程序计数器</h5><p>程序计数器(Program Counter Register)是一块较小的内存空间，它是运行速度最快的存储区域，因为它位于处理器内部，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解析器的工作是<code>通过改变这个计数器的值来选取下一条需要执行的字节码指令</code>(<strong>线程私有</strong>)，<code>分支、循环、跳转、异常处理、线程恢复</code>等基础功能都需要依赖这个计数器来完成。</p><ul><li><strong>特性：内存私有</strong></li></ul><p>由于jvm的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，也就是任何时刻，一个处理器(或者说一个内核)都只会执行一条线程中的指令。因此为了线程切换后能恢复到正确的执行位置，<code>每个线程都有独立的程序计数器</code>。</p><ul><li><strong>异常规定：无</strong></li></ul><p>如果线程正在执行Java中的方法，程序计数器记录的就是正在执行虚拟机字节码指令的地址，如果是Native方法，这个计数器就为空(undefined) ，因此该内存区域是唯一一个在Java虚拟机规范中没有规定OutOfMemoryError的区域。</p><h5 id="2-2-2Java虚拟机栈"><a href="#2-2-2Java虚拟机栈" class="headerlink" title="2.2.2Java虚拟机栈"></a>2.2.2Java虚拟机栈</h5><p>Java虚拟机栈(Java Virtual Machine Stacks)描述的是Java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储<code>局部变量表、操作数栈、动态链接、方法出口</code>等信息，每个方法从调用直至执行完成的过程，都对应着一个线帧在虚拟机栈中入栈到出栈的过程。<code>平时说的栈一般指局部变量表部分</code></p><p>栈中存储的数据大小和生命周期必须是确定的，所以Java中只有某些数据，如对象引用是被；放在栈中的，而应用程序内部庞大的生命周期不确定的对象却放在的堆中</p><ul><li><strong>特性：线程私有，它的生命周期和线程相同。</strong></li></ul><p>栈中的数据在本栈内是共享的，注意，因为栈是线程私有的，所以数据共享并不是和其他线程共享，而是栈内共享</p><ul><li><strong>异常规定: StackOverflowError， OutOfMemoryError</strong></li></ul><ol><li>如果线程请求的栈深度大于虚拟机所允许的栈深度就会抛出StackOverflowError异常。</li><li>如果虚拟机是可以动态扩展的，如果扩展时无法申请到足够的内存就会抛出OutOfMemoryError异常。</li></ol><blockquote><p>如图所示:虚拟机栈在运行时使用一种叫栈帧的数据机构来保存上下文数据，栈帧中存放了方法的<code>局部变量表</code>，<code>操作数栈</code>，<code>动态链接</code>和<code>返回地址信息</code>(方法出口)</p></blockquote><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87/1580826839848.png" alt="1580826839848"></p><h5 id="2-2-3本地方法栈"><a href="#2-2-3本地方法栈" class="headerlink" title="2.2.3本地方法栈"></a>2.2.3本地方法栈</h5><p>本地方法栈(Native Method Stack)与虚拟机栈的作用是一样的，只不过虚拟机栈是服务Java方法的，而本地方法栈是<code>为虚拟机调用Native方法服务</code>的。</p><ul><li><strong>异常和特性</strong>：同虚拟机栈</li></ul><p>本地方法并不是Java语言实现的，而是由c语言实现的，当某个线程调用一个本地方法的时候，它就进入了一个全新的不瘦虚拟机限制的区域，本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区，它还可以直接操作处理器的寄存器，或者直接从本地内存中直接分配任意数量的内存，从层级来说，它和虚拟机有同样的权限</p><p>本地方法本质上是依赖于实现的，虚拟机实现的设计者可以自由决定使用什么样的机制来让Java程序执行本地方法，任何本地方法都会使用某种本地方法栈，当调用本地方法的时候，虚拟机会保持当前栈不变，本地方法不会在线程栈内压入新的数据，虚拟机只是简单的动态链接并直接调用指定的本地方法</p><p>在Java虚拟机规范中对于本地方法栈没有特殊的要求，虚拟机可以自由的实现它，因此在Sun HotSpot虚拟机直接把本地方法栈和虚拟机栈合二为一了。</p><h5 id="2-2-4Java堆"><a href="#2-2-4Java堆" class="headerlink" title="2.2.4Java堆"></a>2.2.4Java堆</h5><p>Java堆(Java Heap)是Java虚拟机中内存最大的一块，是被<code>所有线程共享</code>的，在虚拟机启动时候创建， Java堆唯一的目的就是<code>存放对象实例</code>，几乎所有的对象实例都在这里分配内存，随着JIT编译器的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优<br>化的技术将会导致一些微妙的变化，所有的对象都分配在堆上渐渐变得不那么“绝对”了。</p><ul><li><strong>特性：内存共享</strong></li><li><strong>异常规定：OutOfMemoryError</strong></li></ul><p>如果在堆中没有内存完成实例分配，并且堆不可以再扩展时，将会抛出OutofMemoryError， Java虚拟机规范规定， Java堆<code>可以处在物理上不连续的内存空间中</code>，只要逻辑上连续即可，就像我们的磁盘空间一样。在实现上也可以是固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是可扩展的，通过-Xmx和-Xms控制。</p><p>堆在Java虚拟机规范中是一种通用性的内存池，用于存放所有的Java对象，堆是一个运行时的数据区，类的对象从中分配空间，这些对象通过new关键字建立，他们不需要程序代码来显式的释放，堆是有垃圾回收来负责的，堆的优势在于可以动态的分配大小，生命周期也不需要事先告诉编译，但是缺点就是因为是<code>运行时分配</code>，所以数据<code>访问速度较慢</code>，在大多数虚拟机中，Java中的对象和数组都是在堆中。</p><ul><li><strong>逃逸分析</strong></li></ul><blockquote><p>如果一个对象的指针被多个线程或者方法引用的时候，那我们就可以称这个指针发生了逃逸，常见的逃逸主要是<code>全局变量赋值</code>，<code>返回值逃逸</code>，<code>实例引用逃逸</code>(线程逃逸最终也是通过这三种情况来产生的)<br>我们在写代码过程中应当尽量减少逃逸的情况，比如当方法返回值是stringbuffer的时候，我们拿到它的目的紧紧是为了获取里面多字符串，那么就干脆让方法直接返回字符串，这样buffer对象就会随着方法执行完成而回收，就不会发生逃逸问题了</p></blockquote><h5 id="2-2-5方法区"><a href="#2-2-5方法区" class="headerlink" title="2.2.5方法区"></a>2.2.5方法区</h5><p>方法区(Methed Area)用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</p><blockquote><p>很多人愿意把方法区称作而HotSpot虚拟机垃圾回收器团队把GC分代收集扩展到了方法区，或者说是用来永久代来实现方法区而已，这样能省去专门为方法区编写内存管理的代码，但是在Jdk8也移除了“永久代”，使用Native Memory来实现方法区。并重新命名为Metaspace元空间， 也就是方法区相当于我们的Java中的接口，永久代是实现类。</p></blockquote><ul><li><strong>特性：内存共享</strong></li><li><strong>异常规定：OutOfMemoryError</strong></li></ul><p>当方法无法满足内存分配需求时会抛出OutOfMemoryError异常。</p><h3 id="3-类加载机制"><a href="#3-类加载机制" class="headerlink" title="3.类加载机制"></a>3.类加载机制</h3><h4 id="3-1类加载过程"><a href="#3-1类加载过程" class="headerlink" title="3.1类加载过程"></a>3.1类加载过程</h4><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过<code>加载</code>，<code>连接</code>，<code>初始化</code>三步来实现这个类进行初始化。</p><h4 id="3-2类加载器"><a href="#3-2类加载器" class="headerlink" title="3.2类加载器"></a>3.2类加载器</h4><ul><li>(1) Bootstrap classLoader<br>负责加载$JAVA-HOME中的jre/lib/rt.jar里所有的class，由c++实现，不是ClassLoader子类。</li><li>(2) Extension ClassLoader<br>负责加载Java平台中扩展功能的一些jar包，包括$JAVA-HOME中的jre/ib/ext/*.jar或-D java.ext.dirs指定目录下的jar包。</li><li>(3) App ClassLoader<br>负责加载classpath中指定的jar包及目录中class</li><li>(4) Custom ClassLoader<br>应用程序根据自身需要自定义的ClassLoader，如tomcat， jboss都会根据2ee规范自行实现ClassLoader，加载过程中会先检查是否已被加载，检查顺序是自底向上，从Custom ClassLoader到Bootstrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类在所有ClassLoader只加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</li></ul><h4 id="3-3JVM三种预定义加载器"><a href="#3-3JVM三种预定义加载器" class="headerlink" title="3.3JVM三种预定义加载器"></a>3.3JVM三种预定义加载器</h4><blockquote><p>JVM预定义有三种加载器，当一个JVM启动的时候，java默认开始使用如下三种类加载器：</p></blockquote><ol><li><code>引导类加载器(Bootstrap class loader)</code> :它用来加载Java的核心库，是用原生代码来实现的，并不继承自java.lang.ClassLoader，它负责将Java-Runtime-Home/lib下面的核心类库或-xbootclasspath选项指定的jar包加载到内存中。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。</li><li><code>扩展类加载器(Extensions class loader)</code> :该类加载器在此目录里面查找并加载Java类。扩展类加载器是由Sun的ExtClassLoader (sun.misc.Launcher$ExtClassLoader)实现的。它用来加载Java的扩展库。Java虚拟机的实现会提供一个扩展库目录。它负责将Java-Runtime_Home/lib/ext或者由系统变量-Djava.ext.dirs指定位置中的类库加载到内存中。开发者可以直接使用标准扩展类加载器。</li><li><code>系统类加载器(System class loader)</code>:系统类加载器是由Sun的AppClassLoader (sun.misc.Launcher$AppClassLoader)实现的。它负责将系统类路径java-classpath或-Djava.class.path变量所指的目录下的类库加载到内存中。开发者可以直接使用系统类加载器。一般来说， Java应用的类都是由它来完成加载的。可以通过ClassLoader.getSystemClassLoader()来获取它。</li></ol><h4 id="3-4双亲委派"><a href="#3-4双亲委派" class="headerlink" title="3.4双亲委派"></a>3.4双亲委派</h4><p>双亲委派模型的式作过程是:如果一个类加载器收到了类加载的请求，<code>它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成</code>，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完全这个加载请求(它的搜索范围中没有找到所需的类)时，子加载器才会尝试自己去加载。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM&amp;GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM&amp;GC（一）基础概念</title>
      <link href="/2020/01/04/JVM&amp;GC%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/01/04/JVM&amp;GC%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><blockquote><p>JVM是可运行Java代码的假想计算机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆和一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。</p></blockquote><h4 id="并发并行"><a href="#并发并行" class="headerlink" title="并发并行"></a>并发并行</h4><ul><li><p>并发</p><blockquote><p>并发是任务交替执行的，但是多个任务之间是串行的，一般指一个CPU核心的多个线程<code>轮流</code>执行。</p></blockquote></li><li><p>并行</p><blockquote><p>并行是多个线程在同时运行，其发生在多核心的CPU下，每个CPU核心执行一个线程，多个线程<code>同时</code>执行。</p></blockquote></li></ul><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><ul><li><p>进程</p><blockquote><p><code>每个独立运行的程序</code>都是一个<code>进程</code>，程序与程序之间相互隔离，进程与进程之间也隔离。</p></blockquote></li><li><p>线程</p><blockquote><p>每个进程内部至少会有一个线程或多个线程，<code>线程</code>是<code>执行指令的最小单位</code>，每个程序的功能就是由他进程内的所有线程共同完成的。</p></blockquote></li></ul><h4 id="内存泄漏和内存溢出"><a href="#内存泄漏和内存溢出" class="headerlink" title="内存泄漏和内存溢出"></a>内存泄漏和内存溢出</h4><ul><li><p>内存泄漏</p><blockquote><p>内存泄漏指的是我们程序内部的对象在<code>使用了空间之后本应该将资源释放掉</code>，<code>但是没有释放</code>，导致这片内存空间一直无法被再次分配出去，叫做泄漏</p></blockquote></li><li><p>内存溢出</p><blockquote><p>内存溢出指的是当我们的程序申请内存时，因为剩余的内存不足，<code>在进行垃圾回收等操作之后</code>仍旧无法满足分配要求，就会出现内存溢出，内存泄漏在不断增加的情况下最终会导致内存溢出，内存溢出就是<code>我要的资源你满足不了</code>。</p></blockquote></li></ul><h4 id="对象引用级别（四种引用级别）"><a href="#对象引用级别（四种引用级别）" class="headerlink" title="对象引用级别（四种引用级别）"></a>对象引用级别（四种引用级别）</h4><ul><li><p>强引用</p><blockquote><p>在Java中最常见的就是强引用，<code>把一个对象赋给一个引用变量</code>，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于<code>可达状态</code>，它是<code>不可能被垃圾回收机制回收的</code>，即使该对象以后永远都不会被用到，JVM也不会回收。因此强引用是造成Java内存泄漏的主要原因之一。<br>强引用属于包内可见，在一个线程中无需引用可以直接对象，除非引用不存在了，否则对象不会呗GC回收。</p></blockquote></li><li><p>软引用</p><blockquote><p>软引用需要用SoftReference类来实现，对于只有软引用的对象来说，<code>当系统内存足够时它不会被回收，当系统内存空间不足时它会被回收</code>。软引用通常用在对内存敏感的程序中。<br>属于public，当我们的JVM内存不足的时候，GC会通过一系列的算法来决定是否回收软引用对象，并可选的把软引用对象存放在一个引用队列，虚拟机会尽可能让软引用对象存活的时间更长点。</p></blockquote></li><li><p>弱引用</p><blockquote><p>弱引用需要用WeakReference类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收机制一运行，<code>不管JVM的内存空间是否足够，总会回收该对象占用的内存</code>。<br>属于public，GC回收的时候一定会回收弱引用对象，但是关系复杂的弱引用（一开始认为不是弱引用）一般要经过几次GC才会被回收完，<code>弱引用对象常常用于Map中，当Map这个强引用对象被释放后，内部的对象就是弱引用，可以被GC快速回收</code>。</p></blockquote></li><li><p>虚引用</p><blockquote><p>虚引用需要PhantomReference类来实现，它不能单独使用，必须和引用队列联合使用。虚引用的主要作用是<code>跟踪对象被垃圾回收的状态</code>。<br>属于public，本身不是为了这个对象而存在，用于判断GC什么时候执行。</p></blockquote></li></ul><h4 id="对象中止机制（finalization）"><a href="#对象中止机制（finalization）" class="headerlink" title="对象中止机制（finalization）"></a>对象中止机制（finalization）</h4><blockquote><p>Java提供了对象终止机制(finalization)来允许开发人员在对象销毁之前来执行自定义的处理逻辑，这个机制就是<code>通过object的finalize来触发</code>的，在这个方法内我们可以做任何我们可以做的事情，比如<code>关闭连接</code>，<code>释放资源</code>等，也可以在里面<code>让对象重新建立引用</code><br>Java中的对象有三种状态:</p><blockquote><p>第一种是<code>可达状态</code>，也就是处于<code>引用不可回收状态</code><br>第二种是<code>可复活状态</code>，此状态发生在当JVM发现对象出于不可达的时候，如果对象没有触发过终止机制，就会触发对象终止机制，当发现我们的对象重写了finalize并且在里面对对象重新建立引用后会触发对象的复活状态<br>第三种是不可达状态也就是可以回收的状态，这个状态的对象可以是<code>没有重写finalize方法的对象</code>或者是<code>已经执行过一次并复活之后再次不可达的对象</code>finalize只会执行一次，当第二次不可达的时候不会再执行这个方法</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM&amp;GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沁园春·雪</title>
      <link href="/2019/01/23/%E6%B2%81%E5%9B%AD%E6%98%A5%C2%B7%E9%9B%AA/"/>
      <url>/2019/01/23/%E6%B2%81%E5%9B%AD%E6%98%A5%C2%B7%E9%9B%AA/</url>
      
        <content type="html"><![CDATA[<p>北国风光，千里冰封，万里雪飘。<br>望长城内外，惟余莽莽；大河上下，顿失滔滔。<br>山舞银蛇，原驰蜡象，欲与天公试比高。<br>须晴日，看红装素裹，分外妖娆。<br>江山如此多娇，引无数英雄竞折腰。<br>惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。<br>一代天骄，成吉思汗，只识弯弓射大雕。<br>俱往矣，数风流人物，还看今朝。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阴阳师</title>
      <link href="/2019/01/22/%E9%98%B4%E9%98%B3%E5%B8%88/"/>
      <url>/2019/01/22/%E9%98%B4%E9%98%B3%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="雪女"><a href="#雪女" class="headerlink" title="雪女"></a>雪女</h1><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E9%98%B4%E9%98%B3%E5%B8%88/%E9%9B%AA%E5%A5%B3.png?imageView2/1/w/600/h/600" alt="1"></p><h1 id="大天狗"><a href="#大天狗" class="headerlink" title="大天狗"></a>大天狗</h1><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E9%98%B4%E9%98%B3%E5%B8%88/%E5%A4%A7%E5%A4%A9%E7%8B%97.png?imageView2/1/w/600/h/600" alt=""></p><h1 id="白狼"><a href="#白狼" class="headerlink" title="白狼"></a>白狼</h1><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E9%98%B4%E9%98%B3%E5%B8%88/%E7%99%BD%E7%8B%BC.png?imageView2/1/w/600/h/600" alt=""></p><h1 id="青灯行"><a href="#青灯行" class="headerlink" title="青灯行"></a>青灯行</h1><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E9%98%B4%E9%98%B3%E5%B8%88/%E9%9D%92%E7%81%AF%E8%A1%8C.png?imageView2/1/w/1000/h/1000" alt=""></p><h1 id="妖刀姬"><a href="#妖刀姬" class="headerlink" title="妖刀姬"></a>妖刀姬</h1><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E9%98%B4%E9%98%B3%E5%B8%88/%E5%A6%96%E5%88%80%E5%A7%AC.png?imageView2/1/w/600/h/800" alt=""></p><h1 id="莹草"><a href="#莹草" class="headerlink" title="莹草"></a>莹草</h1><p><img src="https://blog-1258750961.cos.ap-beijing.myqcloud.com/%E9%98%B4%E9%98%B3%E5%B8%88/%E8%8E%B9%E8%8D%89.jpg?imageView2/1/w/600/h/1000" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
